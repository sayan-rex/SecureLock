#include "keypad.h"
#include "stm32f407xx_registers.h"

void Keypad_Init(void) {
    // Rows as input (PD8-PD11), Columns as output (PD12-PD15)
    GPIOD->MODER &= ~(0xFF << 16);  // Clear row bits (PD8-PD11 as inputs)
    GPIOD->MODER |= (0x55 << 24);   // Set columns as outputs (PD12-PD15)

    // Enable pull-up for rows
    GPIOD->PUPDR |= (0x55 << 16);   // Pull-up for PD8-PD11
}

char Keypad_GetKey(void) {
    const char keys[4][4] = {
        {'1','2','3','A'},
        {'4','5','6','B'},
        {'7','8','9','C'},
        {'*','0','#','D'}
    };

    // Set all columns high
    GPIOD->ODR |= (0xF << 12);

    for (int col = 0; col < 4; col++) {
        // Set current column low, others high
        GPIOD->ODR &= ~(1 << (col + 12));
        GPIOD->ODR |= (0xF << 12) & ~(1 << (col + 12));

        // Check rows (PD8-PD11)
        for (int row = 0; row < 4; row++) {
            if (!(GPIOD->IDR & (1 << (row + 8)))) {
                // Debounce
                delay_ms(20);
                if (!(GPIOD->IDR & (1 << (row + 8)))) {
                    // Wait for key release
                    while (!(GPIOD->IDR & (1 << (row + 8))));
                    return keys[row][col];
                }
            }
        }

        // Restore column
        GPIOD->ODR |= (1 << (col + 12));
    }

    return '\0';
}

int Keypad_GetPIN(char *buffer, int length, uint32_t timeout) {
    int index = 0;
    uint32_t start_time = get_tick_count();

    while (index < length) {
        if ((get_tick_count() - start_time) > timeout) {
            return 0; // Timeout
        }

        char key = Keypad_GetKey();
        if (key != '\0') {
            if (key == '#') { // Enter key
                buffer[index] = '\0';
                return 1;
            } else if (key == '*') { // Clear key
                index = 0;
            } else if (key >= '0' && key <= '9') {
                buffer[index++] = key;
            }
            delay_ms(200); // Debounce
        }
    }
    return 0;
}

