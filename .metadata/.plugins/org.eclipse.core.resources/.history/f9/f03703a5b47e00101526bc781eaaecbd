#include "wifi.h"
#include "stm32f407xx_registers.h"
#include "utils.h"

void WIFI_Init(void) {
    // Enable USART2 clock
    RCC_APB1ENR |= (1 << 17);

    // Configure USART2 pins: PD5=TX, PD6=RX
    GPIOD->MODER |= (2 << 10) | (2 << 12); // Alternate function
    GPIOD->AFR[0] |= (7 << 20) | (7 << 24); // AF7 for USART2 on PD5/PD6

    // Configure USART2
    USART2->BRR = 0x111; // 115200 baud @ 16MHz
    USART2->CR1 = (1 << 13) | (1 << 3) | (1 << 2); // UE, TE, RE

    // Send AT commands to initialize ESP8266
    WIFI_SendCommand("AT\r\n", 1000);
    WIFI_SendCommand("AT+CWMODE=1\r\n", 2000);
    WIFI_SendCommand("AT+CWJAP=\"Your_SSID\",\"Your_Password\"\r\n", 5000);
}


void WIFI_SendChar(char c) {
    while (!(USART2->SR & (1 << 7))); // Wait for TXE
    USART2->DR = c;
}

char WIFI_ReceiveChar(void) {
    while (!(USART2->SR & (1 << 5))); // Wait for RXNE
    return USART2->DR;
}

void WIFI_SendString(const char *str) {
    while (*str) {
        WIFI_SendChar(*str++);
    }
}

int WIFI_SendCommand(const char *cmd, uint32_t timeout) {
    WIFI_SendString(cmd);

    uint32_t start = get_tick_count();
    while ((get_tick_count() - start) < timeout) {
        if (WIFI_ReceiveChar() == 'O' && WIFI_ReceiveChar() == 'K') {
            return 1;
        }
    }
    return 0;
}

void WIFI_SendLog(const char *message) {
    char buffer[128];
    snprintf(buffer, sizeof(buffer), "AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
    WIFI_SendCommand(buffer, 2000);

    snprintf(buffer, sizeof(buffer),
             "GET /update?api_key=YOUR_API_KEY&field1=%s\r\n", message);
    WIFI_SendCommand("AT+CIPSEND=128\r\n", 1000);
    WIFI_SendString(buffer);
    WIFI_SendChar(0x1A); // Ctrl+Z to send
}

