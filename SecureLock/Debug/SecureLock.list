
SecureLock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08002a34  08002a34  00012a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800302c  0800302c  00020054  2**0
                  CONTENTS
  4 .ARM          00000000  0800302c  0800302c  00020054  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800302c  0800302c  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800302c  0800302c  0001302c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003030  08003030  00013030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08003034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020054  2**0
                  CONTENTS
 10 .bss          000001c0  20000054  20000054  00020054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000214  20000214  00020054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002007e  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000369f  00000000  00000000  000200c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000fa2  00000000  00000000  00023760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000004c0  00000000  00000000  00024708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000373  00000000  00000000  00024bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003427  00000000  00000000  00024f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00004fd9  00000000  00000000  00028362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000ac61  00000000  00000000  0002d33b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000015e8  00000000  00000000  00037f9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  00039584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002a1c 	.word	0x08002a1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08002a1c 	.word	0x08002a1c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <AES_Encrypt>:
// AES implementation (simplified for embedded)
void AES_Init(void) {
    // Initialize any hardware AES acceleration if available
}

void AES_Encrypt(uint8_t *input, uint8_t *output, uint32_t length, const uint8_t *key) {
 8000270:	b480      	push	{r7}
 8000272:	b087      	sub	sp, #28
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
 800027c:	603b      	str	r3, [r7, #0]
    // Simple XOR encryption for demonstration
    // In production, use proper AES implementation
    for (uint32_t i = 0; i < length; i++) {
 800027e:	2300      	movs	r3, #0
 8000280:	617b      	str	r3, [r7, #20]
 8000282:	e012      	b.n	80002aa <AES_Encrypt+0x3a>
        output[i] = input[i] ^ key[i % 16];
 8000284:	68fa      	ldr	r2, [r7, #12]
 8000286:	697b      	ldr	r3, [r7, #20]
 8000288:	4413      	add	r3, r2
 800028a:	7819      	ldrb	r1, [r3, #0]
 800028c:	697b      	ldr	r3, [r7, #20]
 800028e:	f003 030f 	and.w	r3, r3, #15
 8000292:	683a      	ldr	r2, [r7, #0]
 8000294:	4413      	add	r3, r2
 8000296:	781a      	ldrb	r2, [r3, #0]
 8000298:	68b8      	ldr	r0, [r7, #8]
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	4403      	add	r3, r0
 800029e:	404a      	eors	r2, r1
 80002a0:	b2d2      	uxtb	r2, r2
 80002a2:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++) {
 80002a4:	697b      	ldr	r3, [r7, #20]
 80002a6:	3301      	adds	r3, #1
 80002a8:	617b      	str	r3, [r7, #20]
 80002aa:	697a      	ldr	r2, [r7, #20]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d3e8      	bcc.n	8000284 <AES_Encrypt+0x14>
    }
}
 80002b2:	bf00      	nop
 80002b4:	bf00      	nop
 80002b6:	371c      	adds	r7, #28
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr
	...

080002c0 <Config_LoadDefaults>:
void Config_Init(void) {
    // Initialize configuration system
    // This would typically set up EEPROM or flash storage
}

void Config_LoadDefaults(void) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
    // Load default configuration
    // In a real system, this would read from EEPROM or use defaults
    LOG_INFO("Loading default configuration\n");
 80002c4:	4802      	ldr	r0, [pc, #8]	; (80002d0 <Config_LoadDefaults+0x10>)
 80002c6:	f001 fd03 	bl	8001cd0 <debug_printf>
}
 80002ca:	bf00      	nop
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	08002a34 	.word	0x08002a34

080002d4 <Keypad_Init>:
static char last_key = '\0';
static uint32_t last_key_time = 0;
static const uint32_t DEBOUNCE_TIME_MS = 20;
static const uint32_t KEY_REPEAT_TIME_MS = 200;

void Keypad_Init(void) {
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
    // Enable GPIOD clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80002d8:	4b1b      	ldr	r3, [pc, #108]	; (8000348 <Keypad_Init+0x74>)
 80002da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002dc:	4a1a      	ldr	r2, [pc, #104]	; (8000348 <Keypad_Init+0x74>)
 80002de:	f043 0308 	orr.w	r3, r3, #8
 80002e2:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure rows (PD8-PD11) as input with pull-up resistors
    GPIOD->MODER &= ~(0xFF << 16);    // Clear mode bits for PD8-PD11
 80002e4:	4b19      	ldr	r3, [pc, #100]	; (800034c <Keypad_Init+0x78>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a18      	ldr	r2, [pc, #96]	; (800034c <Keypad_Init+0x78>)
 80002ea:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80002ee:	6013      	str	r3, [r2, #0]
    GPIOD->PUPDR &= ~(0xFF << 16);    // Clear pull-up/pull-down bits
 80002f0:	4b16      	ldr	r3, [pc, #88]	; (800034c <Keypad_Init+0x78>)
 80002f2:	68db      	ldr	r3, [r3, #12]
 80002f4:	4a15      	ldr	r2, [pc, #84]	; (800034c <Keypad_Init+0x78>)
 80002f6:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80002fa:	60d3      	str	r3, [r2, #12]
    GPIOD->PUPDR |= (0x55 << 16);     // Set pull-up for PD8-PD11 (01 = pull-up)
 80002fc:	4b13      	ldr	r3, [pc, #76]	; (800034c <Keypad_Init+0x78>)
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	4a12      	ldr	r2, [pc, #72]	; (800034c <Keypad_Init+0x78>)
 8000302:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8000306:	60d3      	str	r3, [r2, #12]

    // Configure columns (PD12-PD15) as output
    GPIOD->MODER &= ~(0xFF << 24);    // Clear mode bits for PD12-PD15
 8000308:	4b10      	ldr	r3, [pc, #64]	; (800034c <Keypad_Init+0x78>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a0f      	ldr	r2, [pc, #60]	; (800034c <Keypad_Init+0x78>)
 800030e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000312:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (0x55 << 24);     // Set output mode for PD12-PD15 (01 = output)
 8000314:	4b0d      	ldr	r3, [pc, #52]	; (800034c <Keypad_Init+0x78>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a0c      	ldr	r2, [pc, #48]	; (800034c <Keypad_Init+0x78>)
 800031a:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800031e:	6013      	str	r3, [r2, #0]

    // Set all columns high initially
    GPIOD->ODR |= (0xF << 12);
 8000320:	4b0a      	ldr	r3, [pc, #40]	; (800034c <Keypad_Init+0x78>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	4a09      	ldr	r2, [pc, #36]	; (800034c <Keypad_Init+0x78>)
 8000326:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800032a:	6153      	str	r3, [r2, #20]

    // Initialize keypad state
    keypad_debounce_counter = 0;
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <Keypad_Init+0x7c>)
 800032e:	2200      	movs	r2, #0
 8000330:	701a      	strb	r2, [r3, #0]
    last_key = '\0';
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <Keypad_Init+0x80>)
 8000334:	2200      	movs	r2, #0
 8000336:	701a      	strb	r2, [r3, #0]
    last_key_time = 0;
 8000338:	4b07      	ldr	r3, [pc, #28]	; (8000358 <Keypad_Init+0x84>)
 800033a:	2200      	movs	r2, #0
 800033c:	601a      	str	r2, [r3, #0]
}
 800033e:	bf00      	nop
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	40023800 	.word	0x40023800
 800034c:	40020c00 	.word	0x40020c00
 8000350:	20000070 	.word	0x20000070
 8000354:	20000071 	.word	0x20000071
 8000358:	20000074 	.word	0x20000074

0800035c <Keypad_GetKey>:

char Keypad_GetKey(void) {
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
    static char prev_key = '\0';
    static uint32_t prev_key_time = 0;
    char current_key = '\0';
 8000362:	2300      	movs	r3, #0
 8000364:	73fb      	strb	r3, [r7, #15]

    // Scan all columns
    for (int col = 0; col < 4; col++) {
 8000366:	2300      	movs	r3, #0
 8000368:	60bb      	str	r3, [r7, #8]
 800036a:	e03c      	b.n	80003e6 <Keypad_GetKey+0x8a>
        // Set current column low, others high
        GPIOD->ODR &= ~(0xF << 12);          // Clear all columns
 800036c:	4b44      	ldr	r3, [pc, #272]	; (8000480 <Keypad_GetKey+0x124>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	4a43      	ldr	r2, [pc, #268]	; (8000480 <Keypad_GetKey+0x124>)
 8000372:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000376:	6153      	str	r3, [r2, #20]
        GPIOD->ODR |= (0xF << 12);           // Set all columns high
 8000378:	4b41      	ldr	r3, [pc, #260]	; (8000480 <Keypad_GetKey+0x124>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4a40      	ldr	r2, [pc, #256]	; (8000480 <Keypad_GetKey+0x124>)
 800037e:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000382:	6153      	str	r3, [r2, #20]
        GPIOD->ODR &= ~(1 << (col + 12));    // Set current column low
 8000384:	4b3e      	ldr	r3, [pc, #248]	; (8000480 <Keypad_GetKey+0x124>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	68ba      	ldr	r2, [r7, #8]
 800038a:	320c      	adds	r2, #12
 800038c:	2101      	movs	r1, #1
 800038e:	fa01 f202 	lsl.w	r2, r1, r2
 8000392:	43d2      	mvns	r2, r2
 8000394:	4611      	mov	r1, r2
 8000396:	4a3a      	ldr	r2, [pc, #232]	; (8000480 <Keypad_GetKey+0x124>)
 8000398:	400b      	ands	r3, r1
 800039a:	6153      	str	r3, [r2, #20]

        // Small delay for settling
        delay_us(10);
 800039c:	200a      	movs	r0, #10
 800039e:	f001 fb18 	bl	80019d2 <delay_us>

        // Read all rows
        for (int row = 0; row < 4; row++) {
 80003a2:	2300      	movs	r3, #0
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	e015      	b.n	80003d4 <Keypad_GetKey+0x78>
            if (!(GPIOD->IDR & (1 << (row + 8)))) {
 80003a8:	4b35      	ldr	r3, [pc, #212]	; (8000480 <Keypad_GetKey+0x124>)
 80003aa:	691b      	ldr	r3, [r3, #16]
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	3208      	adds	r2, #8
 80003b0:	2101      	movs	r1, #1
 80003b2:	fa01 f202 	lsl.w	r2, r1, r2
 80003b6:	4013      	ands	r3, r2
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d108      	bne.n	80003ce <Keypad_GetKey+0x72>
                current_key = keypad_matrix[row][col];
 80003bc:	4a31      	ldr	r2, [pc, #196]	; (8000484 <Keypad_GetKey+0x128>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	441a      	add	r2, r3
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	4413      	add	r3, r2
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	73fb      	strb	r3, [r7, #15]
                break;
 80003cc:	e005      	b.n	80003da <Keypad_GetKey+0x7e>
        for (int row = 0; row < 4; row++) {
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3301      	adds	r3, #1
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2b03      	cmp	r3, #3
 80003d8:	dde6      	ble.n	80003a8 <Keypad_GetKey+0x4c>
            }
        }

        // If key found, break out of column loop
        if (current_key != '\0') {
 80003da:	7bfb      	ldrb	r3, [r7, #15]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d106      	bne.n	80003ee <Keypad_GetKey+0x92>
    for (int col = 0; col < 4; col++) {
 80003e0:	68bb      	ldr	r3, [r7, #8]
 80003e2:	3301      	adds	r3, #1
 80003e4:	60bb      	str	r3, [r7, #8]
 80003e6:	68bb      	ldr	r3, [r7, #8]
 80003e8:	2b03      	cmp	r3, #3
 80003ea:	ddbf      	ble.n	800036c <Keypad_GetKey+0x10>
 80003ec:	e000      	b.n	80003f0 <Keypad_GetKey+0x94>
            break;
 80003ee:	bf00      	nop
        }
    }

    // Reset all columns to high
    GPIOD->ODR |= (0xF << 12);
 80003f0:	4b23      	ldr	r3, [pc, #140]	; (8000480 <Keypad_GetKey+0x124>)
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	4a22      	ldr	r2, [pc, #136]	; (8000480 <Keypad_GetKey+0x124>)
 80003f6:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 80003fa:	6153      	str	r3, [r2, #20]

    // Debounce logic
    if (current_key != '\0') {
 80003fc:	7bfb      	ldrb	r3, [r7, #15]
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d033      	beq.n	800046a <Keypad_GetKey+0x10e>
        if (current_key == prev_key) {
 8000402:	4b21      	ldr	r3, [pc, #132]	; (8000488 <Keypad_GetKey+0x12c>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	7bfa      	ldrb	r2, [r7, #15]
 8000408:	429a      	cmp	r2, r3
 800040a:	d125      	bne.n	8000458 <Keypad_GetKey+0xfc>
            // Same key pressed - check if debounce time has passed
            if ((get_tick_count() - prev_key_time) > DEBOUNCE_TIME_MS) {
 800040c:	f001 faf8 	bl	8001a00 <get_tick_count>
 8000410:	4602      	mov	r2, r0
 8000412:	4b1e      	ldr	r3, [pc, #120]	; (800048c <Keypad_GetKey+0x130>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	1ad3      	subs	r3, r2, r3
 8000418:	2214      	movs	r2, #20
 800041a:	4293      	cmp	r3, r2
 800041c:	d92b      	bls.n	8000476 <Keypad_GetKey+0x11a>
                // Check for key repeat
                if ((get_tick_count() - last_key_time) > KEY_REPEAT_TIME_MS || last_key != current_key) {
 800041e:	f001 faef 	bl	8001a00 <get_tick_count>
 8000422:	4602      	mov	r2, r0
 8000424:	4b1a      	ldr	r3, [pc, #104]	; (8000490 <Keypad_GetKey+0x134>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	1ad3      	subs	r3, r2, r3
 800042a:	22c8      	movs	r2, #200	; 0xc8
 800042c:	4293      	cmp	r3, r2
 800042e:	d804      	bhi.n	800043a <Keypad_GetKey+0xde>
 8000430:	4b18      	ldr	r3, [pc, #96]	; (8000494 <Keypad_GetKey+0x138>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	7bfa      	ldrb	r2, [r7, #15]
 8000436:	429a      	cmp	r2, r3
 8000438:	d01d      	beq.n	8000476 <Keypad_GetKey+0x11a>
                    last_key = current_key;
 800043a:	4a16      	ldr	r2, [pc, #88]	; (8000494 <Keypad_GetKey+0x138>)
 800043c:	7bfb      	ldrb	r3, [r7, #15]
 800043e:	7013      	strb	r3, [r2, #0]
                    last_key_time = get_tick_count();
 8000440:	f001 fade 	bl	8001a00 <get_tick_count>
 8000444:	4603      	mov	r3, r0
 8000446:	4a12      	ldr	r2, [pc, #72]	; (8000490 <Keypad_GetKey+0x134>)
 8000448:	6013      	str	r3, [r2, #0]
                    prev_key_time = get_tick_count();
 800044a:	f001 fad9 	bl	8001a00 <get_tick_count>
 800044e:	4603      	mov	r3, r0
 8000450:	4a0e      	ldr	r2, [pc, #56]	; (800048c <Keypad_GetKey+0x130>)
 8000452:	6013      	str	r3, [r2, #0]
                    return current_key;
 8000454:	7bfb      	ldrb	r3, [r7, #15]
 8000456:	e00f      	b.n	8000478 <Keypad_GetKey+0x11c>
                }
            }
        } else {
            // New key pressed
            prev_key = current_key;
 8000458:	4a0b      	ldr	r2, [pc, #44]	; (8000488 <Keypad_GetKey+0x12c>)
 800045a:	7bfb      	ldrb	r3, [r7, #15]
 800045c:	7013      	strb	r3, [r2, #0]
            prev_key_time = get_tick_count();
 800045e:	f001 facf 	bl	8001a00 <get_tick_count>
 8000462:	4603      	mov	r3, r0
 8000464:	4a09      	ldr	r2, [pc, #36]	; (800048c <Keypad_GetKey+0x130>)
 8000466:	6013      	str	r3, [r2, #0]
 8000468:	e005      	b.n	8000476 <Keypad_GetKey+0x11a>
        }
    } else {
        // No key pressed
        prev_key = '\0';
 800046a:	4b07      	ldr	r3, [pc, #28]	; (8000488 <Keypad_GetKey+0x12c>)
 800046c:	2200      	movs	r2, #0
 800046e:	701a      	strb	r2, [r3, #0]
        prev_key_time = 0;
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <Keypad_GetKey+0x130>)
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
    }

    return '\0';
 8000476:	2300      	movs	r3, #0
}
 8000478:	4618      	mov	r0, r3
 800047a:	3710      	adds	r7, #16
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	40020c00 	.word	0x40020c00
 8000484:	08002e7c 	.word	0x08002e7c
 8000488:	20000078 	.word	0x20000078
 800048c:	2000007c 	.word	0x2000007c
 8000490:	20000074 	.word	0x20000074
 8000494:	20000071 	.word	0x20000071

08000498 <Keypad_GetPIN>:

int Keypad_GetPIN(char *buffer, int max_length, uint32_t timeout_ms) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b088      	sub	sp, #32
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	607a      	str	r2, [r7, #4]
    int length = 0;
 80004a4:	2300      	movs	r3, #0
 80004a6:	61fb      	str	r3, [r7, #28]
    uint32_t start_time = get_tick_count();
 80004a8:	f001 faaa 	bl	8001a00 <get_tick_count>
 80004ac:	61b8      	str	r0, [r7, #24]
    char key;

    // Clear buffer
    memset(buffer, 0, max_length);
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	461a      	mov	r2, r3
 80004b2:	2100      	movs	r1, #0
 80004b4:	68f8      	ldr	r0, [r7, #12]
 80004b6:	f001 fb02 	bl	8001abe <memset>

    // Visual feedback - blink blue LED to indicate PIN entry mode
    led_blink(LED_BLUE, 500, 1);
 80004ba:	2201      	movs	r2, #1
 80004bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80004c0:	2003      	movs	r0, #3
 80004c2:	f001 fbdb 	bl	8001c7c <led_blink>

    while (length < max_length - 1) {
 80004c6:	e063      	b.n	8000590 <Keypad_GetPIN+0xf8>
        // Check for timeout
        if ((get_tick_count() - start_time) > timeout_ms) {
 80004c8:	f001 fa9a 	bl	8001a00 <get_tick_count>
 80004cc:	4602      	mov	r2, r0
 80004ce:	69bb      	ldr	r3, [r7, #24]
 80004d0:	1ad3      	subs	r3, r2, r3
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d201      	bcs.n	80004dc <Keypad_GetPIN+0x44>
            return 0; // Timeout
 80004d8:	2300      	movs	r3, #0
 80004da:	e064      	b.n	80005a6 <Keypad_GetPIN+0x10e>
        }

        key = Keypad_GetKey();
 80004dc:	f7ff ff3e 	bl	800035c <Keypad_GetKey>
 80004e0:	4603      	mov	r3, r0
 80004e2:	75fb      	strb	r3, [r7, #23]

        if (key != '\0') {
 80004e4:	7dfb      	ldrb	r3, [r7, #23]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d04f      	beq.n	800058a <Keypad_GetPIN+0xf2>
            // Handle special keys
            if (key == '#') {
 80004ea:	7dfb      	ldrb	r3, [r7, #23]
 80004ec:	2b23      	cmp	r3, #35	; 0x23
 80004ee:	d106      	bne.n	80004fe <Keypad_GetPIN+0x66>
                // Enter key - terminate string and return
                buffer[length] = '\0';
 80004f0:	69fb      	ldr	r3, [r7, #28]
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	4413      	add	r3, r2
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
                return length;
 80004fa:	69fb      	ldr	r3, [r7, #28]
 80004fc:	e053      	b.n	80005a6 <Keypad_GetPIN+0x10e>
            } else if (key == '*') {
 80004fe:	7dfb      	ldrb	r3, [r7, #23]
 8000500:	2b2a      	cmp	r3, #42	; 0x2a
 8000502:	d110      	bne.n	8000526 <Keypad_GetPIN+0x8e>
                // Clear key
                if (length > 0) {
 8000504:	69fb      	ldr	r3, [r7, #28]
 8000506:	2b00      	cmp	r3, #0
 8000508:	dd3c      	ble.n	8000584 <Keypad_GetPIN+0xec>
                    length--;
 800050a:	69fb      	ldr	r3, [r7, #28]
 800050c:	3b01      	subs	r3, #1
 800050e:	61fb      	str	r3, [r7, #28]
                    buffer[length] = '\0';
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	68fa      	ldr	r2, [r7, #12]
 8000514:	4413      	add	r3, r2
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
                    // Visual feedback for clear
                    led_blink(LED_RED, 100, 1);
 800051a:	2201      	movs	r2, #1
 800051c:	2164      	movs	r1, #100	; 0x64
 800051e:	2002      	movs	r0, #2
 8000520:	f001 fbac 	bl	8001c7c <led_blink>
 8000524:	e02e      	b.n	8000584 <Keypad_GetPIN+0xec>
                }
            } else if (key >= '0' && key <= '9') {
 8000526:	7dfb      	ldrb	r3, [r7, #23]
 8000528:	2b2f      	cmp	r3, #47	; 0x2f
 800052a:	d91a      	bls.n	8000562 <Keypad_GetPIN+0xca>
 800052c:	7dfb      	ldrb	r3, [r7, #23]
 800052e:	2b39      	cmp	r3, #57	; 0x39
 8000530:	d817      	bhi.n	8000562 <Keypad_GetPIN+0xca>
                // Numeric key
                if (length < max_length - 1) {
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	3b01      	subs	r3, #1
 8000536:	69fa      	ldr	r2, [r7, #28]
 8000538:	429a      	cmp	r2, r3
 800053a:	da23      	bge.n	8000584 <Keypad_GetPIN+0xec>
                    buffer[length++] = key;
 800053c:	69fb      	ldr	r3, [r7, #28]
 800053e:	1c5a      	adds	r2, r3, #1
 8000540:	61fa      	str	r2, [r7, #28]
 8000542:	461a      	mov	r2, r3
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	4413      	add	r3, r2
 8000548:	7dfa      	ldrb	r2, [r7, #23]
 800054a:	701a      	strb	r2, [r3, #0]
                    buffer[length] = '\0';
 800054c:	69fb      	ldr	r3, [r7, #28]
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	4413      	add	r3, r2
 8000552:	2200      	movs	r2, #0
 8000554:	701a      	strb	r2, [r3, #0]
                    // Visual feedback for key press
                    led_blink(LED_BLUE, 50, 1);
 8000556:	2201      	movs	r2, #1
 8000558:	2132      	movs	r1, #50	; 0x32
 800055a:	2003      	movs	r0, #3
 800055c:	f001 fb8e 	bl	8001c7c <led_blink>
                if (length < max_length - 1) {
 8000560:	e010      	b.n	8000584 <Keypad_GetPIN+0xec>
                }
            } else if (key == 'A' || key == 'B' || key == 'C' || key == 'D') {
 8000562:	7dfb      	ldrb	r3, [r7, #23]
 8000564:	2b41      	cmp	r3, #65	; 0x41
 8000566:	d008      	beq.n	800057a <Keypad_GetPIN+0xe2>
 8000568:	7dfb      	ldrb	r3, [r7, #23]
 800056a:	2b42      	cmp	r3, #66	; 0x42
 800056c:	d005      	beq.n	800057a <Keypad_GetPIN+0xe2>
 800056e:	7dfb      	ldrb	r3, [r7, #23]
 8000570:	2b43      	cmp	r3, #67	; 0x43
 8000572:	d002      	beq.n	800057a <Keypad_GetPIN+0xe2>
 8000574:	7dfb      	ldrb	r3, [r7, #23]
 8000576:	2b44      	cmp	r3, #68	; 0x44
 8000578:	d104      	bne.n	8000584 <Keypad_GetPIN+0xec>
                // Function keys - could be used for special functions
                // For now, just ignore or provide feedback
                led_blink(LED_ORANGE, 100, 1);
 800057a:	2201      	movs	r2, #1
 800057c:	2164      	movs	r1, #100	; 0x64
 800057e:	2001      	movs	r0, #1
 8000580:	f001 fb7c 	bl	8001c7c <led_blink>
            }

            // Small delay to prevent key bouncing
            delay_ms(50);
 8000584:	2032      	movs	r0, #50	; 0x32
 8000586:	f001 fa0b 	bl	80019a0 <delay_ms>
        }

        // Small delay to reduce CPU usage
        delay_ms(10);
 800058a:	200a      	movs	r0, #10
 800058c:	f001 fa08 	bl	80019a0 <delay_ms>
    while (length < max_length - 1) {
 8000590:	68bb      	ldr	r3, [r7, #8]
 8000592:	3b01      	subs	r3, #1
 8000594:	69fa      	ldr	r2, [r7, #28]
 8000596:	429a      	cmp	r2, r3
 8000598:	db96      	blt.n	80004c8 <Keypad_GetPIN+0x30>
    }

    // Buffer full
    buffer[length] = '\0';
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	4413      	add	r3, r2
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
    return length;
 80005a4:	69fb      	ldr	r3, [r7, #28]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3720      	adds	r7, #32
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <main>:
void Handle_AccessDeniedState(void);
void Handle_LockoutState(void);
void Handle_MaintenanceState(void);
void Handle_ErrorState(void);

int main(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
    // Initialize system
    System_Init();
 80005b4:	f000 f818 	bl	80005e8 <System_Init>

    LOG_INFO("SecureLock System Started\n");
 80005b8:	4806      	ldr	r0, [pc, #24]	; (80005d4 <main+0x24>)
 80005ba:	f001 fb89 	bl	8001cd0 <debug_printf>
    LOG_INFO("Firmware Version: %s\n", SECURELOCK_VERSION);
 80005be:	4906      	ldr	r1, [pc, #24]	; (80005d8 <main+0x28>)
 80005c0:	4806      	ldr	r0, [pc, #24]	; (80005dc <main+0x2c>)
 80005c2:	f001 fb85 	bl	8001cd0 <debug_printf>
    LOG_INFO("System Clock: %lu Hz\n", SYSTEM_CLOCK_FREQ);
 80005c6:	4906      	ldr	r1, [pc, #24]	; (80005e0 <main+0x30>)
 80005c8:	4806      	ldr	r0, [pc, #24]	; (80005e4 <main+0x34>)
 80005ca:	f001 fb81 	bl	8001cd0 <debug_printf>

    // Main application loop
    while (1) {
        System_Run();
 80005ce:	f000 f8ad 	bl	800072c <System_Run>
 80005d2:	e7fc      	b.n	80005ce <main+0x1e>
 80005d4:	08002ab0 	.word	0x08002ab0
 80005d8:	08002ad4 	.word	0x08002ad4
 80005dc:	08002adc 	.word	0x08002adc
 80005e0:	00f42400 	.word	0x00f42400
 80005e4:	08002afc 	.word	0x08002afc

080005e8 <System_Init>:
    }
}

void System_Init(void) {
 80005e8:	b598      	push	{r3, r4, r7, lr}
 80005ea:	af00      	add	r7, sp, #0
    // Configure system clock
    SystemClock_Config();
 80005ec:	f000 f82e 	bl	800064c <SystemClock_Config>

    // Initialize GPIO
    GPIO_Init();
 80005f0:	f000 f854 	bl	800069c <GPIO_Init>

    // Initialize peripherals
    Keypad_Init();
 80005f4:	f7ff fe6e 	bl	80002d4 <Keypad_Init>
    RFID_Init();
 80005f8:	f000 fa18 	bl	8000a2c <RFID_Init>
    WIFI_Init();
 80005fc:	f001 fb70 	bl	8001ce0 <WIFI_Init>

    // Initialize security system
    SecureLock_Init();
 8000600:	f000 fbf4 	bl	8000dec <SecureLock_Init>

    // Load configuration
    Config_LoadDefaults();
 8000604:	f7ff fe5c 	bl	80002c0 <Config_LoadDefaults>

    // Set initial state
    system_config.last_error = ERROR_NONE;
 8000608:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <System_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	755a      	strb	r2, [r3, #21]
    system_config.failed_attempts = 0;
 800060e:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <System_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	751a      	strb	r2, [r3, #20]

    // Copy default AES key
    memcpy(system_config.aes_key, default_aes_key, AES_KEY_SIZE);
 8000614:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <System_Init+0x58>)
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <System_Init+0x5c>)
 8000618:	4614      	mov	r4, r2
 800061a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800061c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    LOG_INFO("System initialization complete\n");
 8000620:	4809      	ldr	r0, [pc, #36]	; (8000648 <System_Init+0x60>)
 8000622:	f001 fb55 	bl	8001cd0 <debug_printf>

    // Visual boot complete indication
    led_blink(LED_GREEN, 200, 2);
 8000626:	2202      	movs	r2, #2
 8000628:	21c8      	movs	r1, #200	; 0xc8
 800062a:	2000      	movs	r0, #0
 800062c:	f001 fb26 	bl	8001c7c <led_blink>
    led_blink(LED_BLUE, 200, 2);
 8000630:	2202      	movs	r2, #2
 8000632:	21c8      	movs	r1, #200	; 0xc8
 8000634:	2003      	movs	r0, #3
 8000636:	f001 fb21 	bl	8001c7c <led_blink>
}
 800063a:	bf00      	nop
 800063c:	bd98      	pop	{r3, r4, r7, pc}
 800063e:	bf00      	nop
 8000640:	20000080 	.word	0x20000080
 8000644:	08002e8c 	.word	0x08002e8c
 8000648:	08002b1c 	.word	0x08002b1c

0800064c <SystemClock_Config>:

void SystemClock_Config(void) {
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
    // Enable HSI (16MHz internal oscillator)
    RCC->CR |= (1 << 0); // HSION
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <SystemClock_Config+0x4c>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a10      	ldr	r2, [pc, #64]	; (8000698 <SystemClock_Config+0x4c>)
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & (1 << 1))); // Wait for HSIRDY
 800065c:	bf00      	nop
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <SystemClock_Config+0x4c>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0302 	and.w	r3, r3, #2
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0f9      	beq.n	800065e <SystemClock_Config+0x12>

    // Use HSI as system clock
    RCC->CFGR &= ~(3 << 0); // Clear SW bits
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <SystemClock_Config+0x4c>)
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	4a0a      	ldr	r2, [pc, #40]	; (8000698 <SystemClock_Config+0x4c>)
 8000670:	f023 0303 	bic.w	r3, r3, #3
 8000674:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (0 << 0);  // Select HSI as system clock
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <SystemClock_Config+0x4c>)
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <SystemClock_Config+0x4c>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & (3 << 2)) != (0 << 2)); // Wait for HSI
 800067e:	bf00      	nop
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <SystemClock_Config+0x4c>)
 8000682:	689b      	ldr	r3, [r3, #8]
 8000684:	f003 030c 	and.w	r3, r3, #12
 8000688:	2b00      	cmp	r3, #0
 800068a:	d1f9      	bne.n	8000680 <SystemClock_Config+0x34>

    LOG_DEBUG("System clock configured to 16MHz HSI\n");
}
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800

0800069c <GPIO_Init>:

void GPIO_Init(void) {
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
    // Enable GPIO clocks
    RCC->AHB1ENR |= (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3) | (1 << 4); // GPIOA-E
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <GPIO_Init+0x84>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	4a1e      	ldr	r2, [pc, #120]	; (8000720 <GPIO_Init+0x84>)
 80006a6:	f043 031f 	orr.w	r3, r3, #31
 80006aa:	6313      	str	r3, [r2, #48]	; 0x30

    // Configure Lock Relay pin
    LOCK_RELAY_PORT->MODER &= ~(3 << (LOCK_RELAY_PIN * 2));
 80006ac:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <GPIO_Init+0x88>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a1c      	ldr	r2, [pc, #112]	; (8000724 <GPIO_Init+0x88>)
 80006b2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80006b6:	6013      	str	r3, [r2, #0]
    LOCK_RELAY_PORT->MODER |= (1 << (LOCK_RELAY_PIN * 2)); // Output mode
 80006b8:	4b1a      	ldr	r3, [pc, #104]	; (8000724 <GPIO_Init+0x88>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a19      	ldr	r2, [pc, #100]	; (8000724 <GPIO_Init+0x88>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c2:	6013      	str	r3, [r2, #0]
    LOCK_RELAY_PORT->ODR &= ~(1 << LOCK_RELAY_PIN); // Start with relay off
 80006c4:	4b17      	ldr	r3, [pc, #92]	; (8000724 <GPIO_Init+0x88>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	4a16      	ldr	r2, [pc, #88]	; (8000724 <GPIO_Init+0x88>)
 80006ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006ce:	6153      	str	r3, [r2, #20]

    // Configure User Button
    USER_BUTTON_PORT->MODER &= ~(3 << (USER_BUTTON_PIN * 2)); // Input mode
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <GPIO_Init+0x8c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a14      	ldr	r2, [pc, #80]	; (8000728 <GPIO_Init+0x8c>)
 80006d6:	f023 0303 	bic.w	r3, r3, #3
 80006da:	6013      	str	r3, [r2, #0]
    USER_BUTTON_PORT->PUPDR &= ~(3 << (USER_BUTTON_PIN * 2));
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <GPIO_Init+0x8c>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	4a11      	ldr	r2, [pc, #68]	; (8000728 <GPIO_Init+0x8c>)
 80006e2:	f023 0303 	bic.w	r3, r3, #3
 80006e6:	60d3      	str	r3, [r2, #12]
    USER_BUTTON_PORT->PUPDR |= (1 << (USER_BUTTON_PIN * 2)); // Pull-up
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <GPIO_Init+0x8c>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <GPIO_Init+0x8c>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	60d3      	str	r3, [r2, #12]

    // Configure Status LEDs
    LED_PORT->MODER &= ~(0xFF << (LED_GREEN_PIN * 2)); // Clear bits
 80006f4:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <GPIO_Init+0x88>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <GPIO_Init+0x88>)
 80006fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80006fe:	6013      	str	r3, [r2, #0]
    LED_PORT->MODER |= (0x55 << (LED_GREEN_PIN * 2));  // Output mode
 8000700:	4b08      	ldr	r3, [pc, #32]	; (8000724 <GPIO_Init+0x88>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <GPIO_Init+0x88>)
 8000706:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800070a:	6013      	str	r3, [r2, #0]

    // Turn off all LEDs initially
    LED_PORT->ODR &= ~((1 << LED_GREEN_PIN) | (1 << LED_ORANGE_PIN) |
 800070c:	4b05      	ldr	r3, [pc, #20]	; (8000724 <GPIO_Init+0x88>)
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <GPIO_Init+0x88>)
 8000712:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000716:	6153      	str	r3, [r2, #20]
                      (1 << LED_RED_PIN) | (1 << LED_BLUE_PIN));

    LOG_DEBUG("GPIO initialization complete\n");
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	40023800 	.word	0x40023800
 8000724:	40020c00 	.word	0x40020c00
 8000728:	40020000 	.word	0x40020000

0800072c <System_Run>:

void System_Run(void) {
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
    // System heartbeat
    System_Heartbeat();
 8000730:	f000 f80c 	bl	800074c <System_Heartbeat>

    // Process any incoming commands
    System_ProcessCommands();
 8000734:	f000 f840 	bl	80007b8 <System_ProcessCommands>

    // Check for maintenance mode trigger
    Check_MaintenanceModeTrigger();
 8000738:	f000 f894 	bl	8000864 <Check_MaintenanceModeTrigger>

    // Run the main security state machine
    SecureLock_Run();
 800073c:	f000 fb7e 	bl	8000e3c <SecureLock_Run>

    // Small delay to prevent CPU hogging
    delay_ms(10);
 8000740:	200a      	movs	r0, #10
 8000742:	f001 f92d 	bl	80019a0 <delay_ms>
}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <System_Heartbeat>:

void System_Heartbeat(void) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
    static uint32_t last_heartbeat = 0;
    uint32_t current_time = get_tick_count();
 8000752:	f001 f955 	bl	8001a00 <get_tick_count>
 8000756:	6078      	str	r0, [r7, #4]

    if (current_time - last_heartbeat >= 1000) {
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <System_Heartbeat+0x5c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	687a      	ldr	r2, [r7, #4]
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000764:	d31c      	bcc.n	80007a0 <System_Heartbeat+0x54>
        system_heartbeat++;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <System_Heartbeat+0x60>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	3301      	adds	r3, #1
 800076c:	4a0f      	ldr	r2, [pc, #60]	; (80007ac <System_Heartbeat+0x60>)
 800076e:	6013      	str	r3, [r2, #0]
        last_heartbeat = current_time;
 8000770:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <System_Heartbeat+0x5c>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6013      	str	r3, [r2, #0]

        // Periodic system tasks
        if (system_heartbeat % 10 == 0) {
 8000776:	4b0d      	ldr	r3, [pc, #52]	; (80007ac <System_Heartbeat+0x60>)
 8000778:	6819      	ldr	r1, [r3, #0]
 800077a:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <System_Heartbeat+0x64>)
 800077c:	fba3 2301 	umull	r2, r3, r3, r1
 8000780:	08da      	lsrs	r2, r3, #3
 8000782:	4613      	mov	r3, r2
 8000784:	009b      	lsls	r3, r3, #2
 8000786:	4413      	add	r3, r2
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	1aca      	subs	r2, r1, r3
 800078c:	2a00      	cmp	r2, #0
 800078e:	d107      	bne.n	80007a0 <System_Heartbeat+0x54>
            LOG_DEBUG("System heartbeat: %lu\n", system_heartbeat);

            // Send periodic status update if WiFi connected
            if (WIFI_IsConnected()) {
 8000790:	f001 fc72 	bl	8002078 <WIFI_IsConnected>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d002      	beq.n	80007a0 <System_Heartbeat+0x54>
                WIFI_SendLog("System heartbeat OK");
 800079a:	4806      	ldr	r0, [pc, #24]	; (80007b4 <System_Heartbeat+0x68>)
 800079c:	f001 fb6a 	bl	8001e74 <WIFI_SendLog>
            }
        }
    }
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	200000a0 	.word	0x200000a0
 80007ac:	20000098 	.word	0x20000098
 80007b0:	cccccccd 	.word	0xcccccccd
 80007b4:	08002b44 	.word	0x08002b44

080007b8 <System_ProcessCommands>:

void System_ProcessCommands(void) {
 80007b8:	b590      	push	{r4, r7, lr}
 80007ba:	b0ab      	sub	sp, #172	; 0xac
 80007bc:	af02      	add	r7, sp, #8
    char command[32];

    if (WIFI_HasCommand()) {
 80007be:	f001 fbed 	bl	8001f9c <WIFI_HasCommand>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d03d      	beq.n	8000844 <System_ProcessCommands+0x8c>
        WIFI_GetCommand(command, sizeof(command));
 80007c8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80007cc:	2120      	movs	r1, #32
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fbf2 	bl	8001fb8 <WIFI_GetCommand>
        LOG_DEBUG("Received command: %s\n", command);

        if (strcmp(command, "UNLOCK") == 0 && REMOTE_UNLOCK_ENABLED) {
 80007d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80007d8:	491c      	ldr	r1, [pc, #112]	; (800084c <System_ProcessCommands+0x94>)
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 f930 	bl	8001a40 <strcmp>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d102      	bne.n	80007ec <System_ProcessCommands+0x34>
            SecureLock_RemoteUnlock();
 80007e6:	f000 fd45 	bl	8001274 <SecureLock_RemoteUnlock>
            system_reset();
        } else {
            LOG_WARNING("Unknown command: %s\n", command);
        }
    }
}
 80007ea:	e02b      	b.n	8000844 <System_ProcessCommands+0x8c>
        } else if (strcmp(command, "STATUS") == 0) {
 80007ec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80007f0:	4917      	ldr	r1, [pc, #92]	; (8000850 <System_ProcessCommands+0x98>)
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 f924 	bl	8001a40 <strcmp>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d110      	bne.n	8000820 <System_ProcessCommands+0x68>
            snprintf(status, sizeof(status),
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <System_ProcessCommands+0x9c>)
 8000800:	681c      	ldr	r4, [r3, #0]
                    system_heartbeat, SecureLock_GetFailedAttempts());
 8000802:	f000 fd4b 	bl	800129c <SecureLock_GetFailedAttempts>
 8000806:	4603      	mov	r3, r0
            snprintf(status, sizeof(status),
 8000808:	4638      	mov	r0, r7
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	4623      	mov	r3, r4
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <System_ProcessCommands+0xa0>)
 8000810:	2180      	movs	r1, #128	; 0x80
 8000812:	f001 fc67 	bl	80020e4 <sniprintf>
            WIFI_SendLog(status);
 8000816:	463b      	mov	r3, r7
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fb2b 	bl	8001e74 <WIFI_SendLog>
}
 800081e:	e011      	b.n	8000844 <System_ProcessCommands+0x8c>
        } else if (strcmp(command, "REBOOT") == 0) {
 8000820:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000824:	490d      	ldr	r1, [pc, #52]	; (800085c <System_ProcessCommands+0xa4>)
 8000826:	4618      	mov	r0, r3
 8000828:	f001 f90a 	bl	8001a40 <strcmp>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d102      	bne.n	8000838 <System_ProcessCommands+0x80>
            system_reset();
 8000832:	f000 f8b3 	bl	800099c <system_reset>
}
 8000836:	e005      	b.n	8000844 <System_ProcessCommands+0x8c>
            LOG_WARNING("Unknown command: %s\n", command);
 8000838:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800083c:	4619      	mov	r1, r3
 800083e:	4808      	ldr	r0, [pc, #32]	; (8000860 <System_ProcessCommands+0xa8>)
 8000840:	f001 fa46 	bl	8001cd0 <debug_printf>
}
 8000844:	bf00      	nop
 8000846:	37a4      	adds	r7, #164	; 0xa4
 8000848:	46bd      	mov	sp, r7
 800084a:	bd90      	pop	{r4, r7, pc}
 800084c:	08002b58 	.word	0x08002b58
 8000850:	08002b60 	.word	0x08002b60
 8000854:	20000098 	.word	0x20000098
 8000858:	08002b68 	.word	0x08002b68
 800085c:	08002b84 	.word	0x08002b84
 8000860:	08002b8c 	.word	0x08002b8c

08000864 <Check_MaintenanceModeTrigger>:

void Check_MaintenanceModeTrigger(void) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
    static uint32_t button_press_time = 0;
    static uint8_t button_was_pressed = 0;

    uint8_t button_pressed = !(USER_BUTTON_PORT->IDR & (1 << USER_BUTTON_PIN));
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <Check_MaintenanceModeTrigger+0x7c>)
 800086c:	691b      	ldr	r3, [r3, #16]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	2b00      	cmp	r3, #0
 8000874:	bf0c      	ite	eq
 8000876:	2301      	moveq	r3, #1
 8000878:	2300      	movne	r3, #0
 800087a:	b2db      	uxtb	r3, r3
 800087c:	71fb      	strb	r3, [r7, #7]

    if (button_pressed && !button_was_pressed) {
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d00c      	beq.n	800089e <Check_MaintenanceModeTrigger+0x3a>
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <Check_MaintenanceModeTrigger+0x80>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d108      	bne.n	800089e <Check_MaintenanceModeTrigger+0x3a>
        button_press_time = get_tick_count();
 800088c:	f001 f8b8 	bl	8001a00 <get_tick_count>
 8000890:	4603      	mov	r3, r0
 8000892:	4a15      	ldr	r2, [pc, #84]	; (80008e8 <Check_MaintenanceModeTrigger+0x84>)
 8000894:	6013      	str	r3, [r2, #0]
        button_was_pressed = 1;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <Check_MaintenanceModeTrigger+0x80>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
            } else {
                Enter_MaintenanceMode();
            }
        }
    }
}
 800089c:	e01c      	b.n	80008d8 <Check_MaintenanceModeTrigger+0x74>
    } else if (!button_pressed && button_was_pressed) {
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d119      	bne.n	80008d8 <Check_MaintenanceModeTrigger+0x74>
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <Check_MaintenanceModeTrigger+0x80>)
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d015      	beq.n	80008d8 <Check_MaintenanceModeTrigger+0x74>
        button_was_pressed = 0;
 80008ac:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <Check_MaintenanceModeTrigger+0x80>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
        if ((get_tick_count() - button_press_time) > 3000) {
 80008b2:	f001 f8a5 	bl	8001a00 <get_tick_count>
 80008b6:	4602      	mov	r2, r0
 80008b8:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <Check_MaintenanceModeTrigger+0x84>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d908      	bls.n	80008d8 <Check_MaintenanceModeTrigger+0x74>
            if (maintenance_mode) {
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <Check_MaintenanceModeTrigger+0x88>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d002      	beq.n	80008d4 <Check_MaintenanceModeTrigger+0x70>
                Exit_MaintenanceMode();
 80008ce:	f000 f823 	bl	8000918 <Exit_MaintenanceMode>
}
 80008d2:	e001      	b.n	80008d8 <Check_MaintenanceModeTrigger+0x74>
                Enter_MaintenanceMode();
 80008d4:	f000 f80c 	bl	80008f0 <Enter_MaintenanceMode>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40020000 	.word	0x40020000
 80008e4:	200000a4 	.word	0x200000a4
 80008e8:	200000a8 	.word	0x200000a8
 80008ec:	2000009c 	.word	0x2000009c

080008f0 <Enter_MaintenanceMode>:

void Enter_MaintenanceMode(void) {
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
    maintenance_mode = 1;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <Enter_MaintenanceMode+0x20>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
    LOG_INFO("Entering maintenance mode\n");
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <Enter_MaintenanceMode+0x24>)
 80008fc:	f001 f9e8 	bl	8001cd0 <debug_printf>

    // Visual indication
    led_blink(LED_BLUE, 100, 5);
 8000900:	2205      	movs	r2, #5
 8000902:	2164      	movs	r1, #100	; 0x64
 8000904:	2003      	movs	r0, #3
 8000906:	f001 f9b9 	bl	8001c7c <led_blink>
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000009c 	.word	0x2000009c
 8000914:	08002ba8 	.word	0x08002ba8

08000918 <Exit_MaintenanceMode>:

void Exit_MaintenanceMode(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
    maintenance_mode = 0;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <Exit_MaintenanceMode+0x20>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
    LOG_INFO("Exiting maintenance mode\n");
 8000922:	4806      	ldr	r0, [pc, #24]	; (800093c <Exit_MaintenanceMode+0x24>)
 8000924:	f001 f9d4 	bl	8001cd0 <debug_printf>

    // Visual indication
    led_blink(LED_GREEN, 100, 3);
 8000928:	2203      	movs	r2, #3
 800092a:	2164      	movs	r1, #100	; 0x64
 800092c:	2000      	movs	r0, #0
 800092e:	f001 f9a5 	bl	8001c7c <led_blink>
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	2000009c 	.word	0x2000009c
 800093c:	08002bcc 	.word	0x08002bcc

08000940 <System_ErrorHandler>:

void System_ErrorHandler(error_code_t error) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b092      	sub	sp, #72	; 0x48
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	71fb      	strb	r3, [r7, #7]
    system_config.last_error = error;
 800094a:	4a11      	ldr	r2, [pc, #68]	; (8000990 <System_ErrorHandler+0x50>)
 800094c:	79fb      	ldrb	r3, [r7, #7]
 800094e:	7553      	strb	r3, [r2, #21]

    LOG_ERROR("System error: %d\n", error);
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4619      	mov	r1, r3
 8000954:	480f      	ldr	r0, [pc, #60]	; (8000994 <System_ErrorHandler+0x54>)
 8000956:	f001 f9bb 	bl	8001cd0 <debug_printf>

    // Log error via WiFi if available
    if (WIFI_IsConnected()) {
 800095a:	f001 fb8d 	bl	8002078 <WIFI_IsConnected>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d00b      	beq.n	800097c <System_ErrorHandler+0x3c>
        char error_msg[64];
        snprintf(error_msg, sizeof(error_msg), "ERROR: %d", error);
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	f107 0008 	add.w	r0, r7, #8
 800096a:	4a0b      	ldr	r2, [pc, #44]	; (8000998 <System_ErrorHandler+0x58>)
 800096c:	2140      	movs	r1, #64	; 0x40
 800096e:	f001 fbb9 	bl	80020e4 <sniprintf>
        WIFI_SendLog(error_msg);
 8000972:	f107 0308 	add.w	r3, r7, #8
 8000976:	4618      	mov	r0, r3
 8000978:	f001 fa7c 	bl	8001e74 <WIFI_SendLog>
    }

    // Blink red LED to indicate error
    led_blink(LED_RED, 200, 10);
 800097c:	220a      	movs	r2, #10
 800097e:	21c8      	movs	r1, #200	; 0xc8
 8000980:	2002      	movs	r0, #2
 8000982:	f001 f97b 	bl	8001c7c <led_blink>
}
 8000986:	bf00      	nop
 8000988:	3748      	adds	r7, #72	; 0x48
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000080 	.word	0x20000080
 8000994:	08002bf0 	.word	0x08002bf0
 8000998:	08002c0c 	.word	0x08002c0c

0800099c <system_reset>:

// System reset handler
void system_reset(void) {
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
    LOG_INFO("System reset requested\n");
 80009a0:	4803      	ldr	r0, [pc, #12]	; (80009b0 <system_reset+0x14>)
 80009a2:	f001 f995 	bl	8001cd0 <debug_printf>

    // Software reset using ARM system control block
    SCB->AIRCR = (0x5FA << 16) | (1 << 2);
 80009a6:	4b03      	ldr	r3, [pc, #12]	; (80009b4 <system_reset+0x18>)
 80009a8:	4a03      	ldr	r2, [pc, #12]	; (80009b8 <system_reset+0x1c>)
 80009aa:	60da      	str	r2, [r3, #12]
    while (1); // Wait for reset
 80009ac:	e7fe      	b.n	80009ac <system_reset+0x10>
 80009ae:	bf00      	nop
 80009b0:	08002c18 	.word	0x08002c18
 80009b4:	e000ed00 	.word	0xe000ed00
 80009b8:	05fa0004 	.word	0x05fa0004

080009bc <NMI_Handler>:
}

// Default exception handlers
__attribute__((weak)) void NMI_Handler(void) {
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
    System_ErrorHandler(ERROR_SYSTEM_FAULT);
 80009c0:	2008      	movs	r0, #8
 80009c2:	f7ff ffbd 	bl	8000940 <System_ErrorHandler>
    while (1);
 80009c6:	e7fe      	b.n	80009c6 <NMI_Handler+0xa>

080009c8 <HardFault_Handler>:
}

__attribute__((weak)) void HardFault_Handler(void) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
    System_ErrorHandler(ERROR_HARDWARE_FAIL);
 80009cc:	2009      	movs	r0, #9
 80009ce:	f7ff ffb7 	bl	8000940 <System_ErrorHandler>
    while (1);
 80009d2:	e7fe      	b.n	80009d2 <HardFault_Handler+0xa>

080009d4 <MemManage_Handler>:
}

__attribute__((weak)) void MemManage_Handler(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
    System_ErrorHandler(ERROR_MEMORY_FULL);
 80009d8:	2006      	movs	r0, #6
 80009da:	f7ff ffb1 	bl	8000940 <System_ErrorHandler>
    while (1);
 80009de:	e7fe      	b.n	80009de <MemManage_Handler+0xa>

080009e0 <BusFault_Handler>:
}

__attribute__((weak)) void BusFault_Handler(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
    System_ErrorHandler(ERROR_HARDWARE_FAIL);
 80009e4:	2009      	movs	r0, #9
 80009e6:	f7ff ffab 	bl	8000940 <System_ErrorHandler>
    while (1);
 80009ea:	e7fe      	b.n	80009ea <BusFault_Handler+0xa>

080009ec <UsageFault_Handler>:
}

__attribute__((weak)) void UsageFault_Handler(void) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
    System_ErrorHandler(ERROR_SYSTEM_FAULT);
 80009f0:	2008      	movs	r0, #8
 80009f2:	f7ff ffa5 	bl	8000940 <System_ErrorHandler>
    while (1);
 80009f6:	e7fe      	b.n	80009f6 <UsageFault_Handler+0xa>

080009f8 <SVC_Handler>:
}

__attribute__((weak)) void SVC_Handler(void) {
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
    // System service call handler
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <PendSV_Handler>:

__attribute__((weak)) void PendSV_Handler(void) {
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
    // Pendable service handler
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <SysTick_Handler>:

__attribute__((weak)) void SysTick_Handler(void) {
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
    // Systick interrupt handler
    static uint32_t tick_count = 0;
    tick_count++;
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <SysTick_Handler+0x18>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	4a03      	ldr	r2, [pc, #12]	; (8000a28 <SysTick_Handler+0x18>)
 8000a1c:	6013      	str	r3, [r2, #0]
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	200000ac 	.word	0x200000ac

08000a2c <RFID_Init>:
#include "rfid.h"
#include "stm32f407xx_registers.h"
#include "utils.h"
#include <string.h>

void RFID_Init(void) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
    // Enable SPI1 clock
    RCC->APB2ENR |= (1 << 12); // SPI1EN
 8000a32:	4b47      	ldr	r3, [pc, #284]	; (8000b50 <RFID_Init+0x124>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	4a46      	ldr	r2, [pc, #280]	; (8000b50 <RFID_Init+0x124>)
 8000a38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a3c:	6453      	str	r3, [r2, #68]	; 0x44

    // Configure SPI1 pins: PA5=SCK, PA6=MISO, PA7=MOSI
    GPIOA->MODER &= ~((3 << 10) | (3 << 12) | (3 << 14)); // Clear bits
 8000a3e:	4b45      	ldr	r3, [pc, #276]	; (8000b54 <RFID_Init+0x128>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a44      	ldr	r2, [pc, #272]	; (8000b54 <RFID_Init+0x128>)
 8000a44:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8000a48:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((2 << 10) | (2 << 12) | (2 << 14));  // Alternate function mode
 8000a4a:	4b42      	ldr	r3, [pc, #264]	; (8000b54 <RFID_Init+0x128>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a41      	ldr	r2, [pc, #260]	; (8000b54 <RFID_Init+0x128>)
 8000a50:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 8000a54:	6013      	str	r3, [r2, #0]

    GPIOA->AFR[0] &= ~((0xF << 20) | (0xF << 24) | (0xF << 28)); // Clear AF bits
 8000a56:	4b3f      	ldr	r3, [pc, #252]	; (8000b54 <RFID_Init+0x128>)
 8000a58:	6a1b      	ldr	r3, [r3, #32]
 8000a5a:	4a3e      	ldr	r2, [pc, #248]	; (8000b54 <RFID_Init+0x128>)
 8000a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000a60:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= ((5 << 20) | (5 << 24) | (5 << 28));        // AF5 for SPI1
 8000a62:	4b3c      	ldr	r3, [pc, #240]	; (8000b54 <RFID_Init+0x128>)
 8000a64:	6a1b      	ldr	r3, [r3, #32]
 8000a66:	4a3b      	ldr	r2, [pc, #236]	; (8000b54 <RFID_Init+0x128>)
 8000a68:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000a6c:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8000a70:	6213      	str	r3, [r2, #32]

    // Configure RFID SS pin (PE3) and RST pin (PE2)
    GPIOE->MODER &= ~((3 << 4) | (3 << 6)); // Clear bits
 8000a72:	4b39      	ldr	r3, [pc, #228]	; (8000b58 <RFID_Init+0x12c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a38      	ldr	r2, [pc, #224]	; (8000b58 <RFID_Init+0x12c>)
 8000a78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a7c:	6013      	str	r3, [r2, #0]
    GPIOE->MODER |= ((1 << 4) | (1 << 6));  // Output mode
 8000a7e:	4b36      	ldr	r3, [pc, #216]	; (8000b58 <RFID_Init+0x12c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a35      	ldr	r2, [pc, #212]	; (8000b58 <RFID_Init+0x12c>)
 8000a84:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a88:	6013      	str	r3, [r2, #0]

    GPIOE->ODR |= (1 << 3); // SS high initially
 8000a8a:	4b33      	ldr	r3, [pc, #204]	; (8000b58 <RFID_Init+0x12c>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	4a32      	ldr	r2, [pc, #200]	; (8000b58 <RFID_Init+0x12c>)
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	6153      	str	r3, [r2, #20]
    GPIOE->ODR |= (1 << 2); // RST high
 8000a96:	4b30      	ldr	r3, [pc, #192]	; (8000b58 <RFID_Init+0x12c>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	4a2f      	ldr	r2, [pc, #188]	; (8000b58 <RFID_Init+0x12c>)
 8000a9c:	f043 0304 	orr.w	r3, r3, #4
 8000aa0:	6153      	str	r3, [r2, #20]

    // Configure SPI1
    SPI1->CR1 = (1 << 2) | (1 << 1) | (1 << 0); // BR[2:0] = 011 (fPCLK/16)
 8000aa2:	4b2e      	ldr	r3, [pc, #184]	; (8000b5c <RFID_Init+0x130>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	601a      	str	r2, [r3, #0]
    SPI1->CR1 |= (1 << 9) | (1 << 8);           // SSM=1, SSI=1
 8000aa8:	4b2c      	ldr	r3, [pc, #176]	; (8000b5c <RFID_Init+0x130>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a2b      	ldr	r2, [pc, #172]	; (8000b5c <RFID_Init+0x130>)
 8000aae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000ab2:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (1 << 6);                      // SPI enable
 8000ab4:	4b29      	ldr	r3, [pc, #164]	; (8000b5c <RFID_Init+0x130>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a28      	ldr	r2, [pc, #160]	; (8000b5c <RFID_Init+0x130>)
 8000aba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000abe:	6013      	str	r3, [r2, #0]

    // Reset RC522
    GPIOE->ODR &= ~(1 << 2); // RST low
 8000ac0:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <RFID_Init+0x12c>)
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	4a24      	ldr	r2, [pc, #144]	; (8000b58 <RFID_Init+0x12c>)
 8000ac6:	f023 0304 	bic.w	r3, r3, #4
 8000aca:	6153      	str	r3, [r2, #20]
    delay_ms(10);
 8000acc:	200a      	movs	r0, #10
 8000ace:	f000 ff67 	bl	80019a0 <delay_ms>
    GPIOE->ODR |= (1 << 2);  // RST high
 8000ad2:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <RFID_Init+0x12c>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	4a20      	ldr	r2, [pc, #128]	; (8000b58 <RFID_Init+0x12c>)
 8000ad8:	f043 0304 	orr.w	r3, r3, #4
 8000adc:	6153      	str	r3, [r2, #20]
    delay_ms(10);
 8000ade:	200a      	movs	r0, #10
 8000ae0:	f000 ff5e 	bl	80019a0 <delay_ms>

    // Initialize MFRC522
    RFID_WriteRegister(MFRC522_COMMAND_REG, MFRC522_CMD_SOFT_RESET);
 8000ae4:	210f      	movs	r1, #15
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f000 f85a 	bl	8000ba0 <RFID_WriteRegister>
    delay_ms(50);
 8000aec:	2032      	movs	r0, #50	; 0x32
 8000aee:	f000 ff57 	bl	80019a0 <delay_ms>

    // Configure MFRC522
    RFID_WriteRegister(MFRC522_T_MODE_REG, 0x8D);
 8000af2:	218d      	movs	r1, #141	; 0x8d
 8000af4:	202a      	movs	r0, #42	; 0x2a
 8000af6:	f000 f853 	bl	8000ba0 <RFID_WriteRegister>
    RFID_WriteRegister(MFRC522_T_PRESCALER_REG, 0x3E);
 8000afa:	213e      	movs	r1, #62	; 0x3e
 8000afc:	202b      	movs	r0, #43	; 0x2b
 8000afe:	f000 f84f 	bl	8000ba0 <RFID_WriteRegister>
    RFID_WriteRegister(MFRC522_T_RELOAD_L_REG, 30);
 8000b02:	211e      	movs	r1, #30
 8000b04:	202d      	movs	r0, #45	; 0x2d
 8000b06:	f000 f84b 	bl	8000ba0 <RFID_WriteRegister>
    RFID_WriteRegister(MFRC522_T_RELOAD_H_REG, 0);
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	202c      	movs	r0, #44	; 0x2c
 8000b0e:	f000 f847 	bl	8000ba0 <RFID_WriteRegister>
    RFID_WriteRegister(MFRC522_TX_AUTO_REG, 0x40);
 8000b12:	2140      	movs	r1, #64	; 0x40
 8000b14:	2015      	movs	r0, #21
 8000b16:	f000 f843 	bl	8000ba0 <RFID_WriteRegister>
    RFID_WriteRegister(MFRC522_MODE_REG, 0x3D);
 8000b1a:	213d      	movs	r1, #61	; 0x3d
 8000b1c:	2011      	movs	r0, #17
 8000b1e:	f000 f83f 	bl	8000ba0 <RFID_WriteRegister>

    // Enable antenna
    uint8_t value = RFID_ReadRegister(MFRC522_TX_CONTROL_REG);
 8000b22:	2014      	movs	r0, #20
 8000b24:	f000 f864 	bl	8000bf0 <RFID_ReadRegister>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	71fb      	strb	r3, [r7, #7]
    if (!(value & 0x03)) {
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 0303 	and.w	r3, r3, #3
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d107      	bne.n	8000b46 <RFID_Init+0x11a>
        RFID_WriteRegister(MFRC522_TX_CONTROL_REG, value | 0x03);
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	f043 0303 	orr.w	r3, r3, #3
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	4619      	mov	r1, r3
 8000b40:	2014      	movs	r0, #20
 8000b42:	f000 f82d 	bl	8000ba0 <RFID_WriteRegister>
    }
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020000 	.word	0x40020000
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40013000 	.word	0x40013000

08000b60 <RFID_Transfer>:

uint8_t RFID_Transfer(uint8_t data) {
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
    // Wait for TX buffer empty
    while (!(SPI1->SR & (1 << 1))); // Wait for TXE
 8000b6a:	bf00      	nop
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <RFID_Transfer+0x3c>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f003 0302 	and.w	r3, r3, #2
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d0f9      	beq.n	8000b6c <RFID_Transfer+0xc>

    // Send data
    SPI1->DR = data;
 8000b78:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <RFID_Transfer+0x3c>)
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	60d3      	str	r3, [r2, #12]

    // Wait for RX buffer not empty
    while (!(SPI1->SR & (1 << 0))); // Wait for RXNE
 8000b7e:	bf00      	nop
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <RFID_Transfer+0x3c>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d0f9      	beq.n	8000b80 <RFID_Transfer+0x20>

    // Return received data
    return SPI1->DR;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <RFID_Transfer+0x3c>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	b2db      	uxtb	r3, r3
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	40013000 	.word	0x40013000

08000ba0 <RFID_WriteRegister>:

void RFID_WriteRegister(uint8_t reg, uint8_t value) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	460a      	mov	r2, r1
 8000baa:	71fb      	strb	r3, [r7, #7]
 8000bac:	4613      	mov	r3, r2
 8000bae:	71bb      	strb	r3, [r7, #6]
    GPIOE->ODR &= ~(1 << 3); // SS low
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <RFID_WriteRegister+0x4c>)
 8000bb2:	695b      	ldr	r3, [r3, #20]
 8000bb4:	4a0d      	ldr	r2, [pc, #52]	; (8000bec <RFID_WriteRegister+0x4c>)
 8000bb6:	f023 0308 	bic.w	r3, r3, #8
 8000bba:	6153      	str	r3, [r2, #20]

    RFID_Transfer((reg << 1) & 0x7E); // MSB = 0 for write, bits 1-6 = register address
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ffc9 	bl	8000b60 <RFID_Transfer>
    RFID_Transfer(value);
 8000bce:	79bb      	ldrb	r3, [r7, #6]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ffc5 	bl	8000b60 <RFID_Transfer>

    GPIOE->ODR |= (1 << 3); // SS high
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <RFID_WriteRegister+0x4c>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	4a04      	ldr	r2, [pc, #16]	; (8000bec <RFID_WriteRegister+0x4c>)
 8000bdc:	f043 0308 	orr.w	r3, r3, #8
 8000be0:	6153      	str	r3, [r2, #20]
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000

08000bf0 <RFID_ReadRegister>:

uint8_t RFID_ReadRegister(uint8_t reg) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b084      	sub	sp, #16
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;

    GPIOE->ODR &= ~(1 << 3); // SS low
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <RFID_ReadRegister+0x50>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <RFID_ReadRegister+0x50>)
 8000c00:	f023 0308 	bic.w	r3, r3, #8
 8000c04:	6153      	str	r3, [r2, #20]

    RFID_Transfer(((reg << 1) & 0x7E) | 0x80); // MSB = 1 for read
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	b25b      	sxtb	r3, r3
 8000c0c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000c10:	b25b      	sxtb	r3, r3
 8000c12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ffa0 	bl	8000b60 <RFID_Transfer>
    value = RFID_Transfer(0x00);
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff ff9d 	bl	8000b60 <RFID_Transfer>
 8000c26:	4603      	mov	r3, r0
 8000c28:	73fb      	strb	r3, [r7, #15]

    GPIOE->ODR |= (1 << 3); // SS high
 8000c2a:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <RFID_ReadRegister+0x50>)
 8000c2c:	695b      	ldr	r3, [r3, #20]
 8000c2e:	4a04      	ldr	r2, [pc, #16]	; (8000c40 <RFID_ReadRegister+0x50>)
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	6153      	str	r3, [r2, #20]

    return value;
 8000c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3710      	adds	r7, #16
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40021000 	.word	0x40021000

08000c44 <RFID_CheckForCard>:

int RFID_CheckForCard(uint8_t *uid, uint8_t *uid_size) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
    uint8_t buffer[10];
    uint8_t back_len;

    // Send request command
    buffer[0] = PICC_CMD_REQA;
 8000c4e:	2326      	movs	r3, #38	; 0x26
 8000c50:	733b      	strb	r3, [r7, #12]
    buffer[1] = 0x20;
 8000c52:	2320      	movs	r3, #32
 8000c54:	737b      	strb	r3, [r7, #13]

    if (RFID_TransceiveData(buffer, 2, buffer, &back_len) != 0) {
 8000c56:	f107 030b 	add.w	r3, r7, #11
 8000c5a:	f107 020c 	add.w	r2, r7, #12
 8000c5e:	f107 000c 	add.w	r0, r7, #12
 8000c62:	2102      	movs	r1, #2
 8000c64:	f000 f83b 	bl	8000cde <RFID_TransceiveData>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <RFID_CheckForCard+0x2e>
        return 0; // No card found
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e031      	b.n	8000cd6 <RFID_CheckForCard+0x92>
    }

    // Anti-collision
    buffer[0] = PICC_CMD_SEL_CL1;
 8000c72:	2393      	movs	r3, #147	; 0x93
 8000c74:	733b      	strb	r3, [r7, #12]
    buffer[1] = 0x20;
 8000c76:	2320      	movs	r3, #32
 8000c78:	737b      	strb	r3, [r7, #13]

    if (RFID_TransceiveData(buffer, 2, buffer, &back_len) == 0 && back_len >= 5) {
 8000c7a:	f107 030b 	add.w	r3, r7, #11
 8000c7e:	f107 020c 	add.w	r2, r7, #12
 8000c82:	f107 000c 	add.w	r0, r7, #12
 8000c86:	2102      	movs	r1, #2
 8000c88:	f000 f829 	bl	8000cde <RFID_TransceiveData>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d120      	bne.n	8000cd4 <RFID_CheckForCard+0x90>
 8000c92:	7afb      	ldrb	r3, [r7, #11]
 8000c94:	2b04      	cmp	r3, #4
 8000c96:	d91d      	bls.n	8000cd4 <RFID_CheckForCard+0x90>
        if (uid != NULL) {
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d012      	beq.n	8000cc4 <RFID_CheckForCard+0x80>
            // Copy UID (bytes 1-4 of the response)
            for (uint8_t i = 0; i < 4; i++) {
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	75fb      	strb	r3, [r7, #23]
 8000ca2:	e00c      	b.n	8000cbe <RFID_CheckForCard+0x7a>
                uid[i] = buffer[i + 1];
 8000ca4:	7dfb      	ldrb	r3, [r7, #23]
 8000ca6:	1c5a      	adds	r2, r3, #1
 8000ca8:	7dfb      	ldrb	r3, [r7, #23]
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	440b      	add	r3, r1
 8000cae:	3218      	adds	r2, #24
 8000cb0:	443a      	add	r2, r7
 8000cb2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8000cb6:	701a      	strb	r2, [r3, #0]
            for (uint8_t i = 0; i < 4; i++) {
 8000cb8:	7dfb      	ldrb	r3, [r7, #23]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	75fb      	strb	r3, [r7, #23]
 8000cbe:	7dfb      	ldrb	r3, [r7, #23]
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	d9ef      	bls.n	8000ca4 <RFID_CheckForCard+0x60>
            }
        }
        if (uid_size != NULL) {
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d002      	beq.n	8000cd0 <RFID_CheckForCard+0x8c>
            *uid_size = 4; // Standard 4-byte UID
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	2204      	movs	r2, #4
 8000cce:	701a      	strb	r2, [r3, #0]
        }
        return 1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e000      	b.n	8000cd6 <RFID_CheckForCard+0x92>
    }

    return 0;
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <RFID_TransceiveData>:

uint8_t RFID_TransceiveData(uint8_t *send_data, uint8_t send_len,
                           uint8_t *back_data, uint8_t *back_len) {
 8000cde:	b590      	push	{r4, r7, lr}
 8000ce0:	b087      	sub	sp, #28
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	607a      	str	r2, [r7, #4]
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	460b      	mov	r3, r1
 8000cec:	72fb      	strb	r3, [r7, #11]
    uint8_t status;
    uint8_t irq_en = 0x00;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	74bb      	strb	r3, [r7, #18]
    uint8_t wait_irq = 0x30;
 8000cf2:	2330      	movs	r3, #48	; 0x30
 8000cf4:	747b      	strb	r3, [r7, #17]

    // Prepare for data transfer
    RFID_WriteRegister(MFRC522_COMMAND_REG, MFRC522_CMD_IDLE);
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f7ff ff51 	bl	8000ba0 <RFID_WriteRegister>

    // Clear interrupts
    RFID_WriteRegister(MFRC522_COMIRQ_REG, 0x7F);
 8000cfe:	217f      	movs	r1, #127	; 0x7f
 8000d00:	2004      	movs	r0, #4
 8000d02:	f7ff ff4d 	bl	8000ba0 <RFID_WriteRegister>

    // Set FIFO level
    RFID_WriteRegister(MFRC522_FIFO_LEVEL_REG, 0x80);
 8000d06:	2180      	movs	r1, #128	; 0x80
 8000d08:	200a      	movs	r0, #10
 8000d0a:	f7ff ff49 	bl	8000ba0 <RFID_WriteRegister>

    // Write data to FIFO
    for (uint8_t i = 0; i < send_len; i++) {
 8000d0e:	2300      	movs	r3, #0
 8000d10:	75fb      	strb	r3, [r7, #23]
 8000d12:	e00a      	b.n	8000d2a <RFID_TransceiveData+0x4c>
        RFID_WriteRegister(MFRC522_FIFO_DATA_REG, send_data[i]);
 8000d14:	7dfb      	ldrb	r3, [r7, #23]
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2009      	movs	r0, #9
 8000d20:	f7ff ff3e 	bl	8000ba0 <RFID_WriteRegister>
    for (uint8_t i = 0; i < send_len; i++) {
 8000d24:	7dfb      	ldrb	r3, [r7, #23]
 8000d26:	3301      	adds	r3, #1
 8000d28:	75fb      	strb	r3, [r7, #23]
 8000d2a:	7dfa      	ldrb	r2, [r7, #23]
 8000d2c:	7afb      	ldrb	r3, [r7, #11]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d3f0      	bcc.n	8000d14 <RFID_TransceiveData+0x36>
    }

    // Execute the command
    RFID_WriteRegister(MFRC522_COMMAND_REG, MFRC522_CMD_TRANSCEIVE);
 8000d32:	210c      	movs	r1, #12
 8000d34:	2001      	movs	r0, #1
 8000d36:	f7ff ff33 	bl	8000ba0 <RFID_WriteRegister>
    RFID_WriteRegister(MFRC522_BIT_FRAMING_REG, 0x80);
 8000d3a:	2180      	movs	r1, #128	; 0x80
 8000d3c:	200d      	movs	r0, #13
 8000d3e:	f7ff ff2f 	bl	8000ba0 <RFID_WriteRegister>

    // Wait for completion
    uint16_t i = 2000; // Timeout counter
 8000d42:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d46:	82bb      	strh	r3, [r7, #20]
    do {
        status = RFID_ReadRegister(MFRC522_COMMAND_REG);
 8000d48:	2001      	movs	r0, #1
 8000d4a:	f7ff ff51 	bl	8000bf0 <RFID_ReadRegister>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	743b      	strb	r3, [r7, #16]
        if ((--i == 0) || (status & 0x01)) {
 8000d52:	8abb      	ldrh	r3, [r7, #20]
 8000d54:	3b01      	subs	r3, #1
 8000d56:	82bb      	strh	r3, [r7, #20]
 8000d58:	8abb      	ldrh	r3, [r7, #20]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00e      	beq.n	8000d7c <RFID_TransceiveData+0x9e>
 8000d5e:	7c3b      	ldrb	r3, [r7, #16]
 8000d60:	f003 0301 	and.w	r3, r3, #1
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d109      	bne.n	8000d7c <RFID_TransceiveData+0x9e>
            break;
        }
    } while (!(RFID_ReadRegister(MFRC522_COMIRQ_REG) & wait_irq));
 8000d68:	2004      	movs	r0, #4
 8000d6a:	f7ff ff41 	bl	8000bf0 <RFID_ReadRegister>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	7c7b      	ldrb	r3, [r7, #17]
 8000d74:	4013      	ands	r3, r2
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0e5      	beq.n	8000d48 <RFID_TransceiveData+0x6a>

    // Check for errors
    if (i == 0) {
 8000d7c:	8abb      	ldrh	r3, [r7, #20]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <RFID_TransceiveData+0xa8>
        return 0xFF; // Timeout
 8000d82:	23ff      	movs	r3, #255	; 0xff
 8000d84:	e02e      	b.n	8000de4 <RFID_TransceiveData+0x106>
    }

    if (RFID_ReadRegister(MFRC522_ERROR_REG) & 0x13) {
 8000d86:	2006      	movs	r0, #6
 8000d88:	f7ff ff32 	bl	8000bf0 <RFID_ReadRegister>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	f003 0313 	and.w	r3, r3, #19
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <RFID_TransceiveData+0xbc>
        return 0xFF; // Error
 8000d96:	23ff      	movs	r3, #255	; 0xff
 8000d98:	e024      	b.n	8000de4 <RFID_TransceiveData+0x106>
    }

    // Read received data
    if (back_data != NULL && back_len != NULL) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d020      	beq.n	8000de2 <RFID_TransceiveData+0x104>
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d01d      	beq.n	8000de2 <RFID_TransceiveData+0x104>
        *back_len = RFID_ReadRegister(MFRC522_FIFO_LEVEL_REG);
 8000da6:	200a      	movs	r0, #10
 8000da8:	f7ff ff22 	bl	8000bf0 <RFID_ReadRegister>
 8000dac:	4603      	mov	r3, r0
 8000dae:	461a      	mov	r2, r3
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	701a      	strb	r2, [r3, #0]
        if (*back_len > 0) {
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d012      	beq.n	8000de2 <RFID_TransceiveData+0x104>
            for (uint8_t i = 0; i < *back_len; i++) {
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	74fb      	strb	r3, [r7, #19]
 8000dc0:	e00a      	b.n	8000dd8 <RFID_TransceiveData+0xfa>
                back_data[i] = RFID_ReadRegister(MFRC522_FIFO_DATA_REG);
 8000dc2:	7cfb      	ldrb	r3, [r7, #19]
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	18d4      	adds	r4, r2, r3
 8000dc8:	2009      	movs	r0, #9
 8000dca:	f7ff ff11 	bl	8000bf0 <RFID_ReadRegister>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	7023      	strb	r3, [r4, #0]
            for (uint8_t i = 0; i < *back_len; i++) {
 8000dd2:	7cfb      	ldrb	r3, [r7, #19]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	74fb      	strb	r3, [r7, #19]
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	7cfa      	ldrb	r2, [r7, #19]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	d3ef      	bcc.n	8000dc2 <RFID_TransceiveData+0xe4>
            }
        }
    }

    return 0x00; // Success
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	371c      	adds	r7, #28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd90      	pop	{r4, r7, pc}

08000dec <SecureLock_Init>:
                    0x66, 0xcb, 0x7f, 0x8e, 0xfe, 0x1f, 0x7c, 0x8a},
        .privileges = 0x0F
    }
};

void SecureLock_Init(void) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
    current_state = STATE_IDLE;
 8000df0:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <SecureLock_Init+0x3c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
    failed_attempts = 0;
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <SecureLock_Init+0x40>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
    current_user_id = 0xFF;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <SecureLock_Init+0x44>)
 8000dfe:	22ff      	movs	r2, #255	; 0xff
 8000e00:	701a      	strb	r2, [r3, #0]
    memset(current_uid, 0, sizeof(current_uid));
 8000e02:	2204      	movs	r2, #4
 8000e04:	2100      	movs	r1, #0
 8000e06:	480b      	ldr	r0, [pc, #44]	; (8000e34 <SecureLock_Init+0x48>)
 8000e08:	f000 fe59 	bl	8001abe <memset>

    // Initialize security peripherals
    RFID_Init();
 8000e0c:	f7ff fe0e 	bl	8000a2c <RFID_Init>
    Keypad_Init();
 8000e10:	f7ff fa60 	bl	80002d4 <Keypad_Init>
    WIFI_Init();
 8000e14:	f000 ff64 	bl	8001ce0 <WIFI_Init>

    SecureLock_LogAccess(0xFF, false, "System initialized");
 8000e18:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <SecureLock_Init+0x4c>)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	20ff      	movs	r0, #255	; 0xff
 8000e1e:	f000 f9bb 	bl	8001198 <SecureLock_LogAccess>
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200000b0 	.word	0x200000b0
 8000e2c:	200000b8 	.word	0x200000b8
 8000e30:	20000000 	.word	0x20000000
 8000e34:	200000b4 	.word	0x200000b4
 8000e38:	08002c38 	.word	0x08002c38

08000e3c <SecureLock_Run>:

void SecureLock_Run(void) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
    uint32_t current_time = get_tick_count();
 8000e42:	f000 fddd 	bl	8001a00 <get_tick_count>
 8000e46:	60f8      	str	r0, [r7, #12]

    // Check for lockout state
    if (current_state == STATE_LOCKOUT) {
 8000e48:	4b2b      	ldr	r3, [pc, #172]	; (8000ef8 <SecureLock_Run+0xbc>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b06      	cmp	r3, #6
 8000e4e:	d110      	bne.n	8000e72 <SecureLock_Run+0x36>
        if (current_time >= lockout_end_time) {
 8000e50:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <SecureLock_Run+0xc0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d349      	bcc.n	8000eee <SecureLock_Run+0xb2>
            current_state = STATE_IDLE;
 8000e5a:	4b27      	ldr	r3, [pc, #156]	; (8000ef8 <SecureLock_Run+0xbc>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
            failed_attempts = 0;
 8000e60:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <SecureLock_Run+0xc4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
            SecureLock_LogAccess(0xFF, false, "Lockout period ended");
 8000e66:	4a27      	ldr	r2, [pc, #156]	; (8000f04 <SecureLock_Run+0xc8>)
 8000e68:	2100      	movs	r1, #0
 8000e6a:	20ff      	movs	r0, #255	; 0xff
 8000e6c:	f000 f994 	bl	8001198 <SecureLock_LogAccess>
        }
        return;
 8000e70:	e03d      	b.n	8000eee <SecureLock_Run+0xb2>
    }

    // Check session timeout
    if (current_state != STATE_IDLE &&
 8000e72:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <SecureLock_Run+0xbc>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d011      	beq.n	8000e9e <SecureLock_Run+0x62>
        (current_time - last_activity_time) > SESSION_TIMEOUT_MS) {
 8000e7a:	4b23      	ldr	r3, [pc, #140]	; (8000f08 <SecureLock_Run+0xcc>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	1ad3      	subs	r3, r2, r3
    if (current_state != STATE_IDLE &&
 8000e82:	f242 7210 	movw	r2, #10000	; 0x2710
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d909      	bls.n	8000e9e <SecureLock_Run+0x62>
        SecureLock_ResetSession();
 8000e8a:	f000 f969 	bl	8001160 <SecureLock_ResetSession>
        SecureLock_LogAccess(current_user_id, false, "Session timeout");
 8000e8e:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <SecureLock_Run+0xd0>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	4a1f      	ldr	r2, [pc, #124]	; (8000f10 <SecureLock_Run+0xd4>)
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f97e 	bl	8001198 <SecureLock_LogAccess>
        return;
 8000e9c:	e028      	b.n	8000ef0 <SecureLock_Run+0xb4>
    }

    // Process RFID scanning
    uint8_t uid[4];
    uint8_t uid_size;
    if (RFID_CheckForCard(uid, &uid_size)) {
 8000e9e:	1dfa      	adds	r2, r7, #7
 8000ea0:	f107 0308 	add.w	r3, r7, #8
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fecc 	bl	8000c44 <RFID_CheckForCard>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d007      	beq.n	8000ec2 <SecureLock_Run+0x86>
        SecureLock_ProcessRFID(uid);
 8000eb2:	f107 0308 	add.w	r3, r7, #8
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f82c 	bl	8000f14 <SecureLock_ProcessRFID>
        last_activity_time = current_time;
 8000ebc:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <SecureLock_Run+0xcc>)
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6013      	str	r3, [r2, #0]
    }

    // Process keypad input
    if (current_state == STATE_RFID_SCANNING) {
 8000ec2:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <SecureLock_Run+0xbc>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d112      	bne.n	8000ef0 <SecureLock_Run+0xb4>
        char pin[5];
        if (Keypad_GetPIN(pin, 4, 5000)) { // 5 second timeout for PIN entry
 8000eca:	463b      	mov	r3, r7
 8000ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fae0 	bl	8000498 <Keypad_GetPIN>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d008      	beq.n	8000ef0 <SecureLock_Run+0xb4>
            SecureLock_ProcessPIN(pin);
 8000ede:	463b      	mov	r3, r7
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 f84d 	bl	8000f80 <SecureLock_ProcessPIN>
            last_activity_time = current_time;
 8000ee6:	4a08      	ldr	r2, [pc, #32]	; (8000f08 <SecureLock_Run+0xcc>)
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	6013      	str	r3, [r2, #0]
 8000eec:	e000      	b.n	8000ef0 <SecureLock_Run+0xb4>
        return;
 8000eee:	bf00      	nop
        }
    }
}
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200000b0 	.word	0x200000b0
 8000efc:	200000c0 	.word	0x200000c0
 8000f00:	200000b8 	.word	0x200000b8
 8000f04:	08002c4c 	.word	0x08002c4c
 8000f08:	200000bc 	.word	0x200000bc
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	08002c64 	.word	0x08002c64

08000f14 <SecureLock_ProcessRFID>:

void SecureLock_ProcessRFID(uint8_t *uid) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    uint8_t user_id = SecureLock_ValidateRFID(uid);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f885 	bl	800102c <SecureLock_ValidateRFID>
 8000f22:	4603      	mov	r3, r0
 8000f24:	73fb      	strb	r3, [r7, #15]

    if (user_id != 0xFF) {
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	2bff      	cmp	r3, #255	; 0xff
 8000f2a:	d014      	beq.n	8000f56 <SecureLock_ProcessRFID+0x42>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
        memcpy(current_uid, uid, 4);
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <SecureLock_ProcessRFID+0x58>)
 8000f34:	601a      	str	r2, [r3, #0]
        current_user_id = user_id;
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <SecureLock_ProcessRFID+0x5c>)
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	7013      	strb	r3, [r2, #0]
        current_state = STATE_RFID_SCANNING;
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <SecureLock_ProcessRFID+0x60>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]

        // Visual feedback - blue LED for PIN entry mode
        led_on(LED_BLUE);
 8000f42:	2003      	movs	r0, #3
 8000f44:	f000 fe3a 	bl	8001bbc <led_on>
        SecureLock_LogAccess(user_id, false, "RFID validated, awaiting PIN");
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <SecureLock_ProcessRFID+0x64>)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f922 	bl	8001198 <SecureLock_LogAccess>
    } else {
        SecureLock_DenyAccess();
        SecureLock_LogAccess(0xFF, false, "Invalid RFID");
    }
}
 8000f54:	e006      	b.n	8000f64 <SecureLock_ProcessRFID+0x50>
        SecureLock_DenyAccess();
 8000f56:	f000 f8ef 	bl	8001138 <SecureLock_DenyAccess>
        SecureLock_LogAccess(0xFF, false, "Invalid RFID");
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <SecureLock_ProcessRFID+0x68>)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	20ff      	movs	r0, #255	; 0xff
 8000f60:	f000 f91a 	bl	8001198 <SecureLock_LogAccess>
}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	200000b4 	.word	0x200000b4
 8000f70:	20000000 	.word	0x20000000
 8000f74:	200000b0 	.word	0x200000b0
 8000f78:	08002c74 	.word	0x08002c74
 8000f7c:	08002c94 	.word	0x08002c94

08000f80 <SecureLock_ProcessPIN>:

void SecureLock_ProcessPIN(char *pin) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
    if (current_state != STATE_RFID_SCANNING) return;
 8000f88:	4b21      	ldr	r3, [pc, #132]	; (8001010 <SecureLock_ProcessPIN+0x90>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d13b      	bne.n	8001008 <SecureLock_ProcessPIN+0x88>

    if (SecureLock_ValidatePIN(pin, (uint8_t *)users[current_user_id].pin_hash)) {
 8000f90:	4b20      	ldr	r3, [pc, #128]	; (8001014 <SecureLock_ProcessPIN+0x94>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4613      	mov	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	4a1d      	ldr	r2, [pc, #116]	; (8001018 <SecureLock_ProcessPIN+0x98>)
 8000fa2:	4413      	add	r3, r2
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f865 	bl	8001078 <SecureLock_ValidatePIN>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d002      	beq.n	8000fba <SecureLock_ProcessPIN+0x3a>
        SecureLock_GrantAccess();
 8000fb4:	f000 f88e 	bl	80010d4 <SecureLock_GrantAccess>
 8000fb8:	e027      	b.n	800100a <SecureLock_ProcessPIN+0x8a>
    } else {
        failed_attempts++;
 8000fba:	4b18      	ldr	r3, [pc, #96]	; (800101c <SecureLock_ProcessPIN+0x9c>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	b2da      	uxtb	r2, r3
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <SecureLock_ProcessPIN+0x9c>)
 8000fc4:	701a      	strb	r2, [r3, #0]
        if (failed_attempts >= MAX_FAILED_ATTEMPTS) {
 8000fc6:	4b15      	ldr	r3, [pc, #84]	; (800101c <SecureLock_ProcessPIN+0x9c>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d912      	bls.n	8000ff4 <SecureLock_ProcessPIN+0x74>
            current_state = STATE_LOCKOUT;
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <SecureLock_ProcessPIN+0x90>)
 8000fd0:	2206      	movs	r2, #6
 8000fd2:	701a      	strb	r2, [r3, #0]
            lockout_end_time = get_tick_count() + LOCKOUT_TIME_MS;
 8000fd4:	f000 fd14 	bl	8001a00 <get_tick_count>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8000fde:	3330      	adds	r3, #48	; 0x30
 8000fe0:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <SecureLock_ProcessPIN+0xa0>)
 8000fe2:	6013      	str	r3, [r2, #0]
            SecureLock_LogAccess(current_user_id, false, "Too many failed attempts - LOCKOUT");
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <SecureLock_ProcessPIN+0x94>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <SecureLock_ProcessPIN+0xa4>)
 8000fea:	2100      	movs	r1, #0
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 f8d3 	bl	8001198 <SecureLock_LogAccess>
 8000ff2:	e00a      	b.n	800100a <SecureLock_ProcessPIN+0x8a>
        } else {
            SecureLock_DenyAccess();
 8000ff4:	f000 f8a0 	bl	8001138 <SecureLock_DenyAccess>
            SecureLock_LogAccess(current_user_id, false, "Wrong PIN");
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <SecureLock_ProcessPIN+0x94>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <SecureLock_ProcessPIN+0xa8>)
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f000 f8c9 	bl	8001198 <SecureLock_LogAccess>
 8001006:	e000      	b.n	800100a <SecureLock_ProcessPIN+0x8a>
    if (current_state != STATE_RFID_SCANNING) return;
 8001008:	bf00      	nop
        }
    }
}
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200000b0 	.word	0x200000b0
 8001014:	20000000 	.word	0x20000000
 8001018:	08002eac 	.word	0x08002eac
 800101c:	200000b8 	.word	0x200000b8
 8001020:	200000c0 	.word	0x200000c0
 8001024:	08002ca4 	.word	0x08002ca4
 8001028:	08002cc8 	.word	0x08002cc8

0800102c <SecureLock_ValidateRFID>:

uint8_t SecureLock_ValidateRFID(uint8_t *uid) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < sizeof(users)/sizeof(users[0]); i++) {
 8001034:	2300      	movs	r3, #0
 8001036:	73fb      	strb	r3, [r7, #15]
 8001038:	e014      	b.n	8001064 <SecureLock_ValidateRFID+0x38>
        if (memcmp(uid, users[i].uid, 4) == 0) {
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	4613      	mov	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4413      	add	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <SecureLock_ValidateRFID+0x48>)
 8001048:	4413      	add	r3, r2
 800104a:	2204      	movs	r2, #4
 800104c:	4619      	mov	r1, r3
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 fd4f 	bl	8001af2 <memcmp>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <SecureLock_ValidateRFID+0x32>
            return i;
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	e006      	b.n	800106c <SecureLock_ValidateRFID+0x40>
    for (uint8_t i = 0; i < sizeof(users)/sizeof(users[0]); i++) {
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	3301      	adds	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d9e7      	bls.n	800103a <SecureLock_ValidateRFID+0xe>
        }
    }
    return 0xFF;
 800106a:	23ff      	movs	r3, #255	; 0xff
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	08002eac 	.word	0x08002eac

08001078 <SecureLock_ValidatePIN>:

uint8_t SecureLock_ValidatePIN(char *pin, uint8_t *stored_hash) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b0a4      	sub	sp, #144	; 0x90
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
    uint8_t computed_hash[32];
    SHA256_CTX ctx;

    // Compute SHA-256 hash of entered PIN
    sha256_init(&ctx);
 8001082:	f107 0308 	add.w	r3, r7, #8
 8001086:	4618      	mov	r0, r3
 8001088:	f000 fb1a 	bl	80016c0 <sha256_init>
    sha256_update(&ctx, (uint8_t*)pin, strlen(pin));
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f000 fcc1 	bl	8001a14 <strlen>
 8001092:	4602      	mov	r2, r0
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	4618      	mov	r0, r3
 800109c:	f000 fb48 	bl	8001730 <sha256_update>
    sha256_final(&ctx, computed_hash);
 80010a0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80010a4:	f107 0308 	add.w	r3, r7, #8
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 fba2 	bl	80017f4 <sha256_final>

    // Compare with stored hash
    return memcmp(computed_hash, stored_hash, 32) == 0;
 80010b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80010b4:	2220      	movs	r2, #32
 80010b6:	6839      	ldr	r1, [r7, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 fd1a 	bl	8001af2 <memcmp>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	bf0c      	ite	eq
 80010c4:	2301      	moveq	r3, #1
 80010c6:	2300      	movne	r3, #0
 80010c8:	b2db      	uxtb	r3, r3
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3790      	adds	r7, #144	; 0x90
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <SecureLock_GrantAccess>:

void SecureLock_GrantAccess(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
    current_state = STATE_ACCESS_GRANTED;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <SecureLock_GrantAccess+0x50>)
 80010da:	2204      	movs	r2, #4
 80010dc:	701a      	strb	r2, [r3, #0]
    failed_attempts = 0;
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <SecureLock_GrantAccess+0x54>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]

    // Activate lock relay
    LOCK_RELAY_PORT->BSRR = (1 << LOCK_RELAY_PIN);
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <SecureLock_GrantAccess+0x58>)
 80010e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ea:	619a      	str	r2, [r3, #24]

    // Visual feedback - green LED
    led_off(LED_BLUE);
 80010ec:	2003      	movs	r0, #3
 80010ee:	f000 fd95 	bl	8001c1c <led_off>
    led_on(LED_GREEN);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 fd62 	bl	8001bbc <led_on>

    SecureLock_LogAccess(current_user_id, true, "Access granted");
 80010f8:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <SecureLock_GrantAccess+0x5c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4a0d      	ldr	r2, [pc, #52]	; (8001134 <SecureLock_GrantAccess+0x60>)
 80010fe:	2101      	movs	r1, #1
 8001100:	4618      	mov	r0, r3
 8001102:	f000 f849 	bl	8001198 <SecureLock_LogAccess>

    // Keep access granted for 3 seconds
    delay_ms(3000);
 8001106:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800110a:	f000 fc49 	bl	80019a0 <delay_ms>

    // Deactivate lock and reset
    LOCK_RELAY_PORT->BSRR = (1 << (LOCK_RELAY_PIN + 16));
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <SecureLock_GrantAccess+0x58>)
 8001110:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001114:	619a      	str	r2, [r3, #24]
    led_off(LED_GREEN);
 8001116:	2000      	movs	r0, #0
 8001118:	f000 fd80 	bl	8001c1c <led_off>
    SecureLock_ResetSession();
 800111c:	f000 f820 	bl	8001160 <SecureLock_ResetSession>
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200000b0 	.word	0x200000b0
 8001128:	200000b8 	.word	0x200000b8
 800112c:	40020c00 	.word	0x40020c00
 8001130:	20000000 	.word	0x20000000
 8001134:	08002cd4 	.word	0x08002cd4

08001138 <SecureLock_DenyAccess>:

void SecureLock_DenyAccess(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
    current_state = STATE_ACCESS_DENIED;
 800113c:	4b07      	ldr	r3, [pc, #28]	; (800115c <SecureLock_DenyAccess+0x24>)
 800113e:	2205      	movs	r2, #5
 8001140:	701a      	strb	r2, [r3, #0]

    // Visual feedback - red LED blink
    led_off(LED_BLUE);
 8001142:	2003      	movs	r0, #3
 8001144:	f000 fd6a 	bl	8001c1c <led_off>
    led_blink(LED_RED, 200, 3);
 8001148:	2203      	movs	r2, #3
 800114a:	21c8      	movs	r1, #200	; 0xc8
 800114c:	2002      	movs	r0, #2
 800114e:	f000 fd95 	bl	8001c7c <led_blink>

    SecureLock_ResetSession();
 8001152:	f000 f805 	bl	8001160 <SecureLock_ResetSession>
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200000b0 	.word	0x200000b0

08001160 <SecureLock_ResetSession>:

void SecureLock_ResetSession(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
    current_state = STATE_IDLE;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <SecureLock_ResetSession+0x2c>)
 8001166:	2200      	movs	r2, #0
 8001168:	701a      	strb	r2, [r3, #0]
    current_user_id = 0xFF;
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <SecureLock_ResetSession+0x30>)
 800116c:	22ff      	movs	r2, #255	; 0xff
 800116e:	701a      	strb	r2, [r3, #0]
    memset(current_uid, 0, sizeof(current_uid));
 8001170:	2204      	movs	r2, #4
 8001172:	2100      	movs	r1, #0
 8001174:	4807      	ldr	r0, [pc, #28]	; (8001194 <SecureLock_ResetSession+0x34>)
 8001176:	f000 fca2 	bl	8001abe <memset>
    led_off(LED_BLUE);
 800117a:	2003      	movs	r0, #3
 800117c:	f000 fd4e 	bl	8001c1c <led_off>
    led_off(LED_GREEN);
 8001180:	2000      	movs	r0, #0
 8001182:	f000 fd4b 	bl	8001c1c <led_off>
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200000b0 	.word	0x200000b0
 8001190:	20000000 	.word	0x20000000
 8001194:	200000b4 	.word	0x200000b4

08001198 <SecureLock_LogAccess>:

void SecureLock_LogAccess(uint8_t user_id, uint8_t granted, const char *reason) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b0c4      	sub	sp, #272	; 0x110
 800119c:	af02      	add	r7, sp, #8
 800119e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80011a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80011ac:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80011b0:	4602      	mov	r2, r0
 80011b2:	701a      	strb	r2, [r3, #0]
 80011b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80011b8:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80011bc:	460a      	mov	r2, r1
 80011be:	701a      	strb	r2, [r3, #0]
    char log_message[128];
    char encrypted_message[128];

    // Create log message
    if (user_id == 0xFF) {
 80011c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80011c4:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2bff      	cmp	r3, #255	; 0xff
 80011cc:	d10b      	bne.n	80011e6 <SecureLock_LogAccess+0x4e>
        snprintf(log_message, sizeof(log_message), "System: %s", reason);
 80011ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80011d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80011d6:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a20      	ldr	r2, [pc, #128]	; (8001260 <SecureLock_LogAccess+0xc8>)
 80011de:	2180      	movs	r1, #128	; 0x80
 80011e0:	f000 ff80 	bl	80020e4 <sniprintf>
 80011e4:	e01c      	b.n	8001220 <SecureLock_LogAccess+0x88>
    } else {
        snprintf(log_message, sizeof(log_message), "User%d: %s - %s",
 80011e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80011ea:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 80011ee:	7819      	ldrb	r1, [r3, #0]
 80011f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80011f4:	f5a3 7381 	sub.w	r3, r3, #258	; 0x102
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SecureLock_LogAccess+0x6a>
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <SecureLock_LogAccess+0xcc>)
 8001200:	e000      	b.n	8001204 <SecureLock_LogAccess+0x6c>
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <SecureLock_LogAccess+0xd0>)
 8001204:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001208:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800120c:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	9201      	str	r2, [sp, #4]
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	460b      	mov	r3, r1
 8001218:	4a14      	ldr	r2, [pc, #80]	; (800126c <SecureLock_LogAccess+0xd4>)
 800121a:	2180      	movs	r1, #128	; 0x80
 800121c:	f000 ff62 	bl	80020e4 <sniprintf>
                user_id, granted ? "GRANTED" : "DENIED", reason);
    }

    // Encrypt log message
    AES_Encrypt((uint8_t*)log_message, (uint8_t*)encrypted_message, strlen(log_message), (uint8_t*)aes_key);
 8001220:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001224:	4618      	mov	r0, r3
 8001226:	f000 fbf5 	bl	8001a14 <strlen>
 800122a:	4602      	mov	r2, r0
 800122c:	f107 0108 	add.w	r1, r7, #8
 8001230:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <SecureLock_LogAccess+0xd8>)
 8001236:	f7ff f81b 	bl	8000270 <AES_Encrypt>

    // Send encrypted log via WiFi
    WIFI_SendEncryptedLog(encrypted_message, strlen(log_message));
 800123a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fbe8 	bl	8001a14 <strlen>
 8001244:	4603      	mov	r3, r0
 8001246:	b29a      	uxth	r2, r3
 8001248:	f107 0308 	add.w	r3, r7, #8
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fe5a 	bl	8001f08 <WIFI_SendEncryptedLog>
}
 8001254:	bf00      	nop
 8001256:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	08002ce4 	.word	0x08002ce4
 8001264:	08002cf0 	.word	0x08002cf0
 8001268:	08002cf8 	.word	0x08002cf8
 800126c:	08002d00 	.word	0x08002d00
 8001270:	08002e9c 	.word	0x08002e9c

08001274 <SecureLock_RemoteUnlock>:

void SecureLock_RemoteUnlock(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
    // This would be called via encrypted WiFi command
    if (current_state != STATE_LOCKOUT) {
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <SecureLock_RemoteUnlock+0x20>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b06      	cmp	r3, #6
 800127e:	d006      	beq.n	800128e <SecureLock_RemoteUnlock+0x1a>
        SecureLock_GrantAccess();
 8001280:	f7ff ff28 	bl	80010d4 <SecureLock_GrantAccess>
        SecureLock_LogAccess(0xFF, true, "Remote unlock");
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <SecureLock_RemoteUnlock+0x24>)
 8001286:	2101      	movs	r1, #1
 8001288:	20ff      	movs	r0, #255	; 0xff
 800128a:	f7ff ff85 	bl	8001198 <SecureLock_LogAccess>
    }
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200000b0 	.word	0x200000b0
 8001298:	08002d10 	.word	0x08002d10

0800129c <SecureLock_GetFailedAttempts>:
    // Send recent access logs to server
    // Implementation would maintain a log buffer and send when requested
    WIFI_SendLog("Access logs requested - feature not implemented");
}

uint8_t SecureLock_GetFailedAttempts(void) {
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
    return failed_attempts;
 80012a0:	4b02      	ldr	r3, [pc, #8]	; (80012ac <SecureLock_GetFailedAttempts+0x10>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	200000b8 	.word	0x200000b8

080012b0 <sha256_transform>:
#define EP0(x) (ROTRIGHT(x,2) ^ ROTRIGHT(x,13) ^ ROTRIGHT(x,22))
#define EP1(x) (ROTRIGHT(x,6) ^ ROTRIGHT(x,11) ^ ROTRIGHT(x,25))
#define SIG0(x) (ROTRIGHT(x,7) ^ ROTRIGHT(x,18) ^ ((x) >> 3))
#define SIG1(x) (ROTRIGHT(x,17) ^ ROTRIGHT(x,19) ^ ((x) >> 10))

void sha256_transform(SHA256_CTX *ctx, uint8_t *data) {
 80012b0:	b480      	push	{r7}
 80012b2:	b0cf      	sub	sp, #316	; 0x13c
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012ba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80012be:	6018      	str	r0, [r3, #0]
 80012c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012c4:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80012c8:	6019      	str	r1, [r3, #0]
    uint32_t a, b, c, d, e, f, g, h, i, j, t1, t2, m[64];

    for (i = 0, j = 0; i < 16; ++i, j += 4)
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80012d6:	e03f      	b.n	8001358 <sha256_transform+0xa8>
        m[i] = (data[j] << 24) | (data[j+1] << 16) | (data[j+2] << 8) | (data[j+3]);
 80012d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80012dc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012e6:	4413      	add	r3, r2
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	061a      	lsls	r2, r3, #24
 80012ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80012f0:	3301      	adds	r3, #1
 80012f2:	f507 719c 	add.w	r1, r7, #312	; 0x138
 80012f6:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 80012fa:	6809      	ldr	r1, [r1, #0]
 80012fc:	440b      	add	r3, r1
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	041b      	lsls	r3, r3, #16
 8001302:	431a      	orrs	r2, r3
 8001304:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001308:	3302      	adds	r3, #2
 800130a:	f507 719c 	add.w	r1, r7, #312	; 0x138
 800130e:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8001312:	6809      	ldr	r1, [r1, #0]
 8001314:	440b      	add	r3, r1
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	4313      	orrs	r3, r2
 800131c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001320:	3203      	adds	r2, #3
 8001322:	f507 719c 	add.w	r1, r7, #312	; 0x138
 8001326:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800132a:	6809      	ldr	r1, [r1, #0]
 800132c:	440a      	add	r2, r1
 800132e:	7812      	ldrb	r2, [r2, #0]
 8001330:	4313      	orrs	r3, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800133c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0, j = 0; i < 16; ++i, j += 4)
 8001344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001348:	3301      	adds	r3, #1
 800134a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800134e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001352:	3304      	adds	r3, #4
 8001354:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800135c:	2b0f      	cmp	r3, #15
 800135e:	d9bb      	bls.n	80012d8 <sha256_transform+0x28>
    for ( ; i < 64; ++i)
 8001360:	e069      	b.n	8001436 <sha256_transform+0x186>
        m[i] = SIG1(m[i-2]) + m[i-7] + SIG0(m[i-15]) + m[i-16];
 8001362:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001366:	1e9a      	subs	r2, r3, #2
 8001368:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800136c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001374:	ea4f 4273 	mov.w	r2, r3, ror #17
 8001378:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800137c:	1e99      	subs	r1, r3, #2
 800137e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001382:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001386:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800138a:	ea4f 43f3 	mov.w	r3, r3, ror #19
 800138e:	405a      	eors	r2, r3
 8001390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001394:	1e99      	subs	r1, r3, #2
 8001396:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800139a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800139e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013a2:	0a9b      	lsrs	r3, r3, #10
 80013a4:	405a      	eors	r2, r3
 80013a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013aa:	1fd9      	subs	r1, r3, #7
 80013ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013b8:	441a      	add	r2, r3
 80013ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013be:	f1a3 010f 	sub.w	r1, r3, #15
 80013c2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80013ce:	ea4f 11f3 	mov.w	r1, r3, ror #7
 80013d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013d6:	f1a3 000f 	sub.w	r0, r3, #15
 80013da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80013e6:	ea4f 43b3 	mov.w	r3, r3, ror #18
 80013ea:	4059      	eors	r1, r3
 80013ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013f0:	f1a3 000f 	sub.w	r0, r3, #15
 80013f4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80013f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001400:	08db      	lsrs	r3, r3, #3
 8001402:	404b      	eors	r3, r1
 8001404:	441a      	add	r2, r3
 8001406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800140a:	f1a3 0110 	sub.w	r1, r3, #16
 800140e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001416:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800141a:	18d1      	adds	r1, r2, r3
 800141c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001424:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for ( ; i < 64; ++i)
 800142c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001430:	3301      	adds	r3, #1
 8001432:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800143a:	2b3f      	cmp	r3, #63	; 0x3f
 800143c:	d991      	bls.n	8001362 <sha256_transform+0xb2>

    a = ctx->state[0]; b = ctx->state[1]; c = ctx->state[2]; d = ctx->state[3];
 800143e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001442:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800144e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001452:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800145e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001462:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800146e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001472:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    e = ctx->state[4]; f = ctx->state[5]; g = ctx->state[6]; h = ctx->state[7];
 800147e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001482:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800148e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001492:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800149e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014a2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80014ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80014b2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 64; ++i) {
 80014be:	2300      	movs	r3, #0
 80014c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80014c4:	e078      	b.n	80015b8 <sha256_transform+0x308>
        t1 = h + EP1(e) + CH(e,f,g) + k[i] + m[i];
 80014c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014ca:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80014ce:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014d2:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80014d6:	405a      	eors	r2, r3
 80014d8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014dc:	ea4f 6373 	mov.w	r3, r3, ror #25
 80014e0:	405a      	eors	r2, r3
 80014e2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80014e6:	441a      	add	r2, r3
 80014e8:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80014ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80014f0:	4019      	ands	r1, r3
 80014f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80014f6:	43d8      	mvns	r0, r3
 80014f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80014fc:	4003      	ands	r3, r0
 80014fe:	404b      	eors	r3, r1
 8001500:	441a      	add	r2, r3
 8001502:	496e      	ldr	r1, [pc, #440]	; (80016bc <sha256_transform+0x40c>)
 8001504:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001508:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800150c:	441a      	add	r2, r3
 800150e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001512:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001516:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800151a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800151e:	4413      	add	r3, r2
 8001520:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        t2 = EP0(a) + MAJ(a,b,c);
 8001524:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001528:	ea4f 02b3 	mov.w	r2, r3, ror #2
 800152c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001530:	ea4f 3373 	mov.w	r3, r3, ror #13
 8001534:	405a      	eors	r2, r3
 8001536:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800153a:	ea4f 53b3 	mov.w	r3, r3, ror #22
 800153e:	405a      	eors	r2, r3
 8001540:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8001544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001548:	4059      	eors	r1, r3
 800154a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800154e:	4019      	ands	r1, r3
 8001550:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8001554:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001558:	4003      	ands	r3, r0
 800155a:	404b      	eors	r3, r1
 800155c:	4413      	add	r3, r2
 800155e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
        h = g; g = f; f = e; e = d + t1;
 8001562:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001566:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800156a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800156e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001572:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001576:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800157a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800157e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001582:	4413      	add	r3, r2
 8001584:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        d = c; c = b; b = a; a = t1 + t2;
 8001588:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800158c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001590:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001594:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001598:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800159c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80015a0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80015a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80015a8:	4413      	add	r3, r2
 80015aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; ++i) {
 80015ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015b2:	3301      	adds	r3, #1
 80015b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80015b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015bc:	2b3f      	cmp	r3, #63	; 0x3f
 80015be:	d982      	bls.n	80014c6 <sha256_transform+0x216>
    }

    ctx->state[0] += a; ctx->state[1] += b; ctx->state[2] += c; ctx->state[3] += d;
 80015c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80015d0:	441a      	add	r2, r3
 80015d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015d6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	609a      	str	r2, [r3, #8]
 80015de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015e2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80015ee:	441a      	add	r2, r3
 80015f0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80015f4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001600:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800160c:	441a      	add	r2, r3
 800160e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001612:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	611a      	str	r2, [r3, #16]
 800161a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800161e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	695a      	ldr	r2, [r3, #20]
 8001626:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800162a:	441a      	add	r2, r3
 800162c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001630:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	615a      	str	r2, [r3, #20]
    ctx->state[4] += e; ctx->state[5] += f; ctx->state[6] += g; ctx->state[7] += h;
 8001638:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800163c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	699a      	ldr	r2, [r3, #24]
 8001644:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001648:	441a      	add	r2, r3
 800164a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800164e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	619a      	str	r2, [r3, #24]
 8001656:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800165a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	69da      	ldr	r2, [r3, #28]
 8001662:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001666:	441a      	add	r2, r3
 8001668:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800166c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	61da      	str	r2, [r3, #28]
 8001674:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001678:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6a1a      	ldr	r2, [r3, #32]
 8001680:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001684:	441a      	add	r2, r3
 8001686:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800168a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	621a      	str	r2, [r3, #32]
 8001692:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8001696:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800169e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80016a2:	441a      	add	r2, r3
 80016a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80016a8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24
}
 80016b0:	bf00      	nop
 80016b2:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	08002ef8 	.word	0x08002ef8

080016c0 <sha256_init>:

void sha256_init(SHA256_CTX *ctx) {
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    ctx->total[0] = ctx->total[1] = 0;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	601a      	str	r2, [r3, #0]
    ctx->state[0] = 0x6a09e667; ctx->state[1] = 0xbb67ae85;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a0d      	ldr	r2, [pc, #52]	; (8001710 <sha256_init+0x50>)
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a0d      	ldr	r2, [pc, #52]	; (8001714 <sha256_init+0x54>)
 80016e0:	60da      	str	r2, [r3, #12]
    ctx->state[2] = 0x3c6ef372; ctx->state[3] = 0xa54ff53a;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a0c      	ldr	r2, [pc, #48]	; (8001718 <sha256_init+0x58>)
 80016e6:	611a      	str	r2, [r3, #16]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a0c      	ldr	r2, [pc, #48]	; (800171c <sha256_init+0x5c>)
 80016ec:	615a      	str	r2, [r3, #20]
    ctx->state[4] = 0x510e527f; ctx->state[5] = 0x9b05688c;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a0b      	ldr	r2, [pc, #44]	; (8001720 <sha256_init+0x60>)
 80016f2:	619a      	str	r2, [r3, #24]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a0b      	ldr	r2, [pc, #44]	; (8001724 <sha256_init+0x64>)
 80016f8:	61da      	str	r2, [r3, #28]
    ctx->state[6] = 0x1f83d9ab; ctx->state[7] = 0x5be0cd19;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <sha256_init+0x68>)
 80016fe:	621a      	str	r2, [r3, #32]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <sha256_init+0x6c>)
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	6a09e667 	.word	0x6a09e667
 8001714:	bb67ae85 	.word	0xbb67ae85
 8001718:	3c6ef372 	.word	0x3c6ef372
 800171c:	a54ff53a 	.word	0xa54ff53a
 8001720:	510e527f 	.word	0x510e527f
 8001724:	9b05688c 	.word	0x9b05688c
 8001728:	1f83d9ab 	.word	0x1f83d9ab
 800172c:	5be0cd19 	.word	0x5be0cd19

08001730 <sha256_update>:

void sha256_update(SHA256_CTX *ctx, uint8_t *data, uint32_t len) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
    uint32_t left = (ctx->total[0] >> 3) & 0x3F;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	08db      	lsrs	r3, r3, #3
 8001742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001746:	617b      	str	r3, [r7, #20]
    uint32_t fill = 64 - left;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800174e:	613b      	str	r3, [r7, #16]
    ctx->total[0] += len << 3;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	441a      	add	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	601a      	str	r2, [r3, #0]
    if (ctx->total[0] < (len << 3)) ctx->total[1]++;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	429a      	cmp	r2, r3
 8001768:	d204      	bcs.n	8001774 <sha256_update+0x44>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	605a      	str	r2, [r3, #4]

    if (left && len >= fill) {
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d028      	beq.n	80017cc <sha256_update+0x9c>
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	429a      	cmp	r2, r3
 8001780:	d324      	bcc.n	80017cc <sha256_update+0x9c>
        memcpy(ctx->buffer + left, data, fill);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	4413      	add	r3, r2
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	68b9      	ldr	r1, [r7, #8]
 8001790:	4618      	mov	r0, r3
 8001792:	f000 f976 	bl	8001a82 <memcpy>
        sha256_transform(ctx, ctx->buffer);
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3328      	adds	r3, #40	; 0x28
 800179a:	4619      	mov	r1, r3
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f7ff fd87 	bl	80012b0 <sha256_transform>
        len -= fill; data += fill; left = 0;
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4413      	add	r3, r2
 80017b0:	60bb      	str	r3, [r7, #8]
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
    }

    while (len >= 64) {
 80017b6:	e009      	b.n	80017cc <sha256_update+0x9c>
        sha256_transform(ctx, data);
 80017b8:	68b9      	ldr	r1, [r7, #8]
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f7ff fd78 	bl	80012b0 <sha256_transform>
        len -= 64; data += 64;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3b40      	subs	r3, #64	; 0x40
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	3340      	adds	r3, #64	; 0x40
 80017ca:	60bb      	str	r3, [r7, #8]
    while (len >= 64) {
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b3f      	cmp	r3, #63	; 0x3f
 80017d0:	d8f2      	bhi.n	80017b8 <sha256_update+0x88>
    }

    if (len) memcpy(ctx->buffer + left, data, len);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d009      	beq.n	80017ec <sha256_update+0xbc>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	4413      	add	r3, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f94b 	bl	8001a82 <memcpy>
}
 80017ec:	bf00      	nop
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <sha256_final>:

void sha256_final(SHA256_CTX *ctx, uint8_t *digest) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b09a      	sub	sp, #104	; 0x68
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
    uint32_t last, padn, high, low;
    uint8_t msglen[8];

    high = (ctx->total[0] >> 29) | (ctx->total[1] << 3);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	0f5a      	lsrs	r2, r3, #29
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4313      	orrs	r3, r2
 800180c:	663b      	str	r3, [r7, #96]	; 0x60
    low = (ctx->total[0] << 3);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	65fb      	str	r3, [r7, #92]	; 0x5c

    msglen[0] = high >> 24; msglen[1] = high >> 16;
 8001816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001818:	0e1b      	lsrs	r3, r3, #24
 800181a:	b2db      	uxtb	r3, r3
 800181c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8001820:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001822:	0c1b      	lsrs	r3, r3, #16
 8001824:	b2db      	uxtb	r3, r3
 8001826:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    msglen[2] = high >> 8; msglen[3] = high;
 800182a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	b2db      	uxtb	r3, r3
 8001830:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8001834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001836:	b2db      	uxtb	r3, r3
 8001838:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    msglen[4] = low >> 24; msglen[5] = low >> 16;
 800183c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800183e:	0e1b      	lsrs	r3, r3, #24
 8001840:	b2db      	uxtb	r3, r3
 8001842:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8001846:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001848:	0c1b      	lsrs	r3, r3, #16
 800184a:	b2db      	uxtb	r3, r3
 800184c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
    msglen[6] = low >> 8; msglen[7] = low;
 8001850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001852:	0a1b      	lsrs	r3, r3, #8
 8001854:	b2db      	uxtb	r3, r3
 8001856:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800185a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

    last = (ctx->total[0] >> 3) & 0x3F;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	08db      	lsrs	r3, r3, #3
 8001868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800186c:	65bb      	str	r3, [r7, #88]	; 0x58
    padn = (last < 56) ? (56 - last) : (120 - last);
 800186e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001870:	2b37      	cmp	r3, #55	; 0x37
 8001872:	d803      	bhi.n	800187c <sha256_final+0x88>
 8001874:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001876:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800187a:	e002      	b.n	8001882 <sha256_final+0x8e>
 800187c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800187e:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8001882:	657b      	str	r3, [r7, #84]	; 0x54

    uint8_t padding[64] = {0x80};
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	f107 0310 	add.w	r3, r7, #16
 800188c:	223c      	movs	r2, #60	; 0x3c
 800188e:	2100      	movs	r1, #0
 8001890:	4618      	mov	r0, r3
 8001892:	f000 f914 	bl	8001abe <memset>
    sha256_update(ctx, padding, padn);
 8001896:	f107 030c 	add.w	r3, r7, #12
 800189a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800189c:	4619      	mov	r1, r3
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ff46 	bl	8001730 <sha256_update>
    sha256_update(ctx, msglen, 8);
 80018a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018a8:	2208      	movs	r2, #8
 80018aa:	4619      	mov	r1, r3
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff3f 	bl	8001730 <sha256_update>

    for (uint32_t i = 0; i < 8; ++i) {
 80018b2:	2300      	movs	r3, #0
 80018b4:	667b      	str	r3, [r7, #100]	; 0x64
 80018b6:	e034      	b.n	8001922 <sha256_final+0x12e>
        digest[i*4] = ctx->state[i] >> 24;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80018bc:	3202      	adds	r2, #2
 80018be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c2:	0e19      	lsrs	r1, r3, #24
 80018c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	4413      	add	r3, r2
 80018cc:	b2ca      	uxtb	r2, r1
 80018ce:	701a      	strb	r2, [r3, #0]
        digest[i*4+1] = ctx->state[i] >> 16;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80018d4:	3202      	adds	r2, #2
 80018d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018da:	0c19      	lsrs	r1, r3, #16
 80018dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	3301      	adds	r3, #1
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	4413      	add	r3, r2
 80018e6:	b2ca      	uxtb	r2, r1
 80018e8:	701a      	strb	r2, [r3, #0]
        digest[i*4+2] = ctx->state[i] >> 8;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80018ee:	3202      	adds	r2, #2
 80018f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f4:	0a19      	lsrs	r1, r3, #8
 80018f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	4413      	add	r3, r2
 8001900:	b2ca      	uxtb	r2, r1
 8001902:	701a      	strb	r2, [r3, #0]
        digest[i*4+3] = ctx->state[i];
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001908:	3202      	adds	r2, #2
 800190a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800190e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	3303      	adds	r3, #3
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	b2ca      	uxtb	r2, r1
 800191a:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < 8; ++i) {
 800191c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800191e:	3301      	adds	r3, #1
 8001920:	667b      	str	r3, [r7, #100]	; 0x64
 8001922:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001924:	2b07      	cmp	r3, #7
 8001926:	d9c7      	bls.n	80018b8 <sha256_final+0xc4>
    }
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	3768      	adds	r7, #104	; 0x68
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800193c:	4a14      	ldr	r2, [pc, #80]	; (8001990 <_sbrk+0x5c>)
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <_sbrk+0x60>)
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <_sbrk+0x64>)
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <_sbrk+0x68>)
 8001954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	429a      	cmp	r2, r3
 8001962:	d207      	bcs.n	8001974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001964:	f000 fc08 	bl	8002178 <__errno>
 8001968:	4603      	mov	r3, r0
 800196a:	220c      	movs	r2, #12
 800196c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
 8001972:	e009      	b.n	8001988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	4a05      	ldr	r2, [pc, #20]	; (8001998 <_sbrk+0x64>)
 8001984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20020000 	.word	0x20020000
 8001994:	00000400 	.word	0x00000400
 8001998:	200000c4 	.word	0x200000c4
 800199c:	20000218 	.word	0x20000218

080019a0 <delay_ms>:
volatile uint32_t tick_counter = 0;
uint32_t SystemCoreClock = 16000000; // Default 16MHz

// ==================== DELAY FUNCTIONS ====================

void delay_ms(uint32_t milliseconds) {
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
    for (volatile uint32_t i = 0; i < milliseconds * 1600; i++) {
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	e003      	b.n	80019b6 <delay_ms+0x16>
        __asm__("nop");
 80019ae:	bf00      	nop
    for (volatile uint32_t i = 0; i < milliseconds * 1600; i++) {
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3301      	adds	r3, #1
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80019bc:	fb03 f202 	mul.w	r2, r3, r2
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d8f3      	bhi.n	80019ae <delay_ms+0xe>
    }
}
 80019c6:	bf00      	nop
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bc80      	pop	{r7}
 80019d0:	4770      	bx	lr

080019d2 <delay_us>:

void delay_us(uint32_t microseconds) {
 80019d2:	b480      	push	{r7}
 80019d4:	b085      	sub	sp, #20
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
    for (volatile uint32_t i = 0; i < microseconds * 16; i++) {
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	e003      	b.n	80019e8 <delay_us+0x16>
        __asm__("nop");
 80019e0:	bf00      	nop
    for (volatile uint32_t i = 0; i < microseconds * 16; i++) {
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3301      	adds	r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	011a      	lsls	r2, r3, #4
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d8f6      	bhi.n	80019e0 <delay_us+0xe>
    }
}
 80019f2:	bf00      	nop
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr
	...

08001a00 <get_tick_count>:
    while (!(SysTick->CTRL & SYSTICK_CTRL_COUNTFLAG));
}

// ==================== TIME FUNCTIONS ====================

uint32_t get_tick_count(void) {
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
    return tick_counter;
 8001a04:	4b02      	ldr	r3, [pc, #8]	; (8001a10 <get_tick_count+0x10>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	200000c8 	.word	0x200000c8

08001a14 <strlen>:
    return (get_tick_count() - start_time) >= delay_ms;
}

// ==================== STRING FUNCTIONS ====================

size_t strlen(const char *str) {
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
    size_t len = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
    while (str[len] != '\0') {
 8001a20:	e002      	b.n	8001a28 <strlen+0x14>
        len++;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3301      	adds	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
    while (str[len] != '\0') {
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f6      	bne.n	8001a22 <strlen+0xe>
    }
    return len;
 8001a34:	68fb      	ldr	r3, [r7, #12]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr

08001a40 <strcmp>:
    char *original_dest = dest;
    while ((*dest++ = *src++) != '\0');
    return original_dest;
}

int strcmp(const char *s1, const char *s2) {
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
    while (*s1 && (*s1 == *s2)) {
 8001a4a:	e005      	b.n	8001a58 <strcmp+0x18>
        s1++;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	607b      	str	r3, [r7, #4]
        s2++;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	3301      	adds	r3, #1
 8001a56:	603b      	str	r3, [r7, #0]
    while (*s1 && (*s1 == *s2)) {
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <strcmp+0x2c>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	781a      	ldrb	r2, [r3, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d0ef      	beq.n	8001a4c <strcmp+0xc>
    }
    return *(const unsigned char *)s1 - *(const unsigned char *)s2;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	1ad3      	subs	r3, r2, r3
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <memcpy>:
    return original_dest;
}

// ==================== MEMORY FUNCTIONS ====================

void *memcpy(void *dest, const void *src, size_t n) {
 8001a82:	b480      	push	{r7}
 8001a84:	b087      	sub	sp, #28
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
    char *d = dest;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	617b      	str	r3, [r7, #20]
    const char *s = src;
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	613b      	str	r3, [r7, #16]
    while (n--) *d++ = *s++;
 8001a96:	e007      	b.n	8001aa8 <memcpy+0x26>
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	1c53      	adds	r3, r2, #1
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	1c59      	adds	r1, r3, #1
 8001aa2:	6179      	str	r1, [r7, #20]
 8001aa4:	7812      	ldrb	r2, [r2, #0]
 8001aa6:	701a      	strb	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	1e5a      	subs	r2, r3, #1
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f2      	bne.n	8001a98 <memcpy+0x16>
    return dest;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <memset>:

void *memset(void *s, int c, size_t n) {
 8001abe:	b480      	push	{r7}
 8001ac0:	b087      	sub	sp, #28
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
    unsigned char *p = s;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	617b      	str	r3, [r7, #20]
    while (n--) *p++ = (unsigned char)c;
 8001ace:	e005      	b.n	8001adc <memset+0x1e>
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	617a      	str	r2, [r7, #20]
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	1e5a      	subs	r2, r3, #1
 8001ae0:	607a      	str	r2, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f4      	bne.n	8001ad0 <memset+0x12>
    return s;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	371c      	adds	r7, #28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <memcmp>:

int memcmp(const void *s1, const void *s2, size_t n) {
 8001af2:	b480      	push	{r7}
 8001af4:	b087      	sub	sp, #28
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
    const unsigned char *p1 = s1, *p2 = s2;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	613b      	str	r3, [r7, #16]
    while (n--) {
 8001b06:	e012      	b.n	8001b2e <memcmp+0x3c>
        if (*p1 != *p2) return *p1 - *p2;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	781a      	ldrb	r2, [r3, #0]
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d006      	beq.n	8001b22 <memcmp+0x30>
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	e00b      	b.n	8001b3a <memcmp+0x48>
        p1++;
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	3301      	adds	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
        p2++;
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	613b      	str	r3, [r7, #16]
    while (n--) {
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	1e5a      	subs	r2, r3, #1
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e7      	bne.n	8001b08 <memcmp+0x16>
    }
    return 0;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	371c      	adds	r7, #28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <memmove>:

void *memmove(void *dest, const void *src, size_t n) {
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
    unsigned char *d = dest;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	617b      	str	r3, [r7, #20]
    const unsigned char *s = src;
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	613b      	str	r3, [r7, #16]
    if (d < s) {
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d20e      	bcs.n	8001b7e <memmove+0x3a>
        while (n--) *d++ = *s++;
 8001b60:	e007      	b.n	8001b72 <memmove+0x2e>
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	1c53      	adds	r3, r2, #1
 8001b66:	613b      	str	r3, [r7, #16]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	1c59      	adds	r1, r3, #1
 8001b6c:	6179      	str	r1, [r7, #20]
 8001b6e:	7812      	ldrb	r2, [r2, #0]
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	607a      	str	r2, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f2      	bne.n	8001b62 <memmove+0x1e>
 8001b7c:	e017      	b.n	8001bae <memmove+0x6a>
    } else {
        d += n;
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4413      	add	r3, r2
 8001b84:	617b      	str	r3, [r7, #20]
        s += n;
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        while (n--) *--d = *--s;
 8001b8e:	e009      	b.n	8001ba4 <memmove+0x60>
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	781a      	ldrb	r2, [r3, #0]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	701a      	strb	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	1e5a      	subs	r2, r3, #1
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <memmove+0x4c>
    }
    return dest;
 8001bae:	68fb      	ldr	r3, [r7, #12]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	371c      	adds	r7, #28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
	...

08001bbc <led_on>:
    return sign * result;
}

// ==================== LED FUNCTIONS ====================

void led_on(uint8_t led) {
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d81f      	bhi.n	8001c0c <led_on+0x50>
 8001bcc:	a201      	add	r2, pc, #4	; (adr r2, 8001bd4 <led_on+0x18>)
 8001bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd2:	bf00      	nop
 8001bd4:	08001be5 	.word	0x08001be5
 8001bd8:	08001bef 	.word	0x08001bef
 8001bdc:	08001bf9 	.word	0x08001bf9
 8001be0:	08001c03 	.word	0x08001c03
        case LED_GREEN: GPIOD->BSRR = (1 << 12); break;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <led_on+0x5c>)
 8001be6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bea:	619a      	str	r2, [r3, #24]
 8001bec:	e00e      	b.n	8001c0c <led_on+0x50>
        case LED_ORANGE: GPIOD->BSRR = (1 << 13); break;
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <led_on+0x5c>)
 8001bf0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf4:	619a      	str	r2, [r3, #24]
 8001bf6:	e009      	b.n	8001c0c <led_on+0x50>
        case LED_RED: GPIOD->BSRR = (1 << 14); break;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <led_on+0x5c>)
 8001bfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001bfe:	619a      	str	r2, [r3, #24]
 8001c00:	e004      	b.n	8001c0c <led_on+0x50>
        case LED_BLUE: GPIOD->BSRR = (1 << 15); break;
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <led_on+0x5c>)
 8001c04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c08:	619a      	str	r2, [r3, #24]
 8001c0a:	bf00      	nop
    }
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40020c00 	.word	0x40020c00

08001c1c <led_off>:

void led_off(uint8_t led) {
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d81f      	bhi.n	8001c6c <led_off+0x50>
 8001c2c:	a201      	add	r2, pc, #4	; (adr r2, 8001c34 <led_off+0x18>)
 8001c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c32:	bf00      	nop
 8001c34:	08001c45 	.word	0x08001c45
 8001c38:	08001c4f 	.word	0x08001c4f
 8001c3c:	08001c59 	.word	0x08001c59
 8001c40:	08001c63 	.word	0x08001c63
        case LED_GREEN: GPIOD->BSRR = (1 << (12 + 16)); break;
 8001c44:	4b0c      	ldr	r3, [pc, #48]	; (8001c78 <led_off+0x5c>)
 8001c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c4a:	619a      	str	r2, [r3, #24]
 8001c4c:	e00e      	b.n	8001c6c <led_off+0x50>
        case LED_ORANGE: GPIOD->BSRR = (1 << (13 + 16)); break;
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	; (8001c78 <led_off+0x5c>)
 8001c50:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c54:	619a      	str	r2, [r3, #24]
 8001c56:	e009      	b.n	8001c6c <led_off+0x50>
        case LED_RED: GPIOD->BSRR = (1 << (14 + 16)); break;
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <led_off+0x5c>)
 8001c5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c5e:	619a      	str	r2, [r3, #24]
 8001c60:	e004      	b.n	8001c6c <led_off+0x50>
        case LED_BLUE: GPIOD->BSRR = (1 << (15 + 16)); break;
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <led_off+0x5c>)
 8001c64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001c68:	619a      	str	r2, [r3, #24]
 8001c6a:	bf00      	nop
    }
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bc80      	pop	{r7}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40020c00 	.word	0x40020c00

08001c7c <led_blink>:
        case LED_RED: GPIOD->ODR ^= (1 << 14); break;
        case LED_BLUE: GPIOD->ODR ^= (1 << 15); break;
    }
}

void led_blink(uint8_t led, uint32_t delay_time, uint8_t count) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	71fb      	strb	r3, [r7, #7]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	71bb      	strb	r3, [r7, #6]
    for (uint8_t i = 0; i < count; i++) {
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	e015      	b.n	8001cbe <led_blink+0x42>
        led_on(led);
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff91 	bl	8001bbc <led_on>
        delay_ms(delay_time);
 8001c9a:	6838      	ldr	r0, [r7, #0]
 8001c9c:	f7ff fe80 	bl	80019a0 <delay_ms>
        led_off(led);
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff ffba 	bl	8001c1c <led_off>
        if (i < count - 1) delay_ms(delay_time);
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	79bb      	ldrb	r3, [r7, #6]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	da02      	bge.n	8001cb8 <led_blink+0x3c>
 8001cb2:	6838      	ldr	r0, [r7, #0]
 8001cb4:	f7ff fe74 	bl	80019a0 <delay_ms>
    for (uint8_t i = 0; i < count; i++) {
 8001cb8:	7bfb      	ldrb	r3, [r7, #15]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	73fb      	strb	r3, [r7, #15]
 8001cbe:	7bfa      	ldrb	r2, [r7, #15]
 8001cc0:	79bb      	ldrb	r3, [r7, #6]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d3e5      	bcc.n	8001c92 <led_blink+0x16>
    }
}
 8001cc6:	bf00      	nop
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}

08001cd0 <debug_printf>:
        }
    }
    return crc;
}

void debug_printf(const char *format, ...) {
 8001cd0:	b40f      	push	{r0, r1, r2, r3}
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
    (void)format;
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	b004      	add	sp, #16
 8001cde:	4770      	bx	lr

08001ce0 <WIFI_Init>:
#include "stm32f407xx_registers.h"
#include "utils.h"
#include <stdio.h>
#include <string.h>

void WIFI_Init(void) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
    // Enable USART2 clock
    RCC->APB1ENR |= (1 << 17); // USART2EN
 8001ce4:	4b1b      	ldr	r3, [pc, #108]	; (8001d54 <WIFI_Init+0x74>)
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	4a1a      	ldr	r2, [pc, #104]	; (8001d54 <WIFI_Init+0x74>)
 8001cea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cee:	6413      	str	r3, [r2, #64]	; 0x40

    // Configure USART2 pins: PD5=TX, PD6=RX
    GPIOD->MODER &= ~((3 << 10) | (3 << 12)); // Clear bits
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <WIFI_Init+0x78>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <WIFI_Init+0x78>)
 8001cf6:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8001cfa:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= ((2 << 10) | (2 << 12));  // Alternate function mode
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <WIFI_Init+0x78>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a15      	ldr	r2, [pc, #84]	; (8001d58 <WIFI_Init+0x78>)
 8001d02:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001d06:	6013      	str	r3, [r2, #0]

    GPIOD->AFR[0] &= ~((0xF << 20) | (0xF << 24)); // Clear AF bits
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <WIFI_Init+0x78>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <WIFI_Init+0x78>)
 8001d0e:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 8001d12:	6213      	str	r3, [r2, #32]
    GPIOD->AFR[0] |= ((7 << 20) | (7 << 24));      // AF7 for USART2
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <WIFI_Init+0x78>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4a0f      	ldr	r2, [pc, #60]	; (8001d58 <WIFI_Init+0x78>)
 8001d1a:	f043 63ee 	orr.w	r3, r3, #124780544	; 0x7700000
 8001d1e:	6213      	str	r3, [r2, #32]

    // Configure USART2
    USART2->BRR = 0x111; // 115200 baud @ 16MHz
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <WIFI_Init+0x7c>)
 8001d22:	f240 1211 	movw	r2, #273	; 0x111
 8001d26:	609a      	str	r2, [r3, #8]
    USART2->CR1 = (1 << 13) | (1 << 3) | (1 << 2); // UE, TE, RE
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <WIFI_Init+0x7c>)
 8001d2a:	f242 020c 	movw	r2, #8204	; 0x200c
 8001d2e:	60da      	str	r2, [r3, #12]

    // Send AT commands to initialize ESP8266
    WIFI_SendCommand("AT\r\n", 1000);
 8001d30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d34:	480a      	ldr	r0, [pc, #40]	; (8001d60 <WIFI_Init+0x80>)
 8001d36:	f000 f845 	bl	8001dc4 <WIFI_SendCommand>
    WIFI_SendCommand("AT+CWMODE=1\r\n", 2000);
 8001d3a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001d3e:	4809      	ldr	r0, [pc, #36]	; (8001d64 <WIFI_Init+0x84>)
 8001d40:	f000 f840 	bl	8001dc4 <WIFI_SendCommand>
    WIFI_SendCommand("AT+CIPMUX=0\r\n", 1000);
 8001d44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d48:	4807      	ldr	r0, [pc, #28]	; (8001d68 <WIFI_Init+0x88>)
 8001d4a:	f000 f83b 	bl	8001dc4 <WIFI_SendCommand>
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	40020c00 	.word	0x40020c00
 8001d5c:	40004400 	.word	0x40004400
 8001d60:	08002d50 	.word	0x08002d50
 8001d64:	08002d58 	.word	0x08002d58
 8001d68:	08002d68 	.word	0x08002d68

08001d6c <WIFI_SendChar>:

void WIFI_SendChar(char c) {
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	71fb      	strb	r3, [r7, #7]
    // Wait for TX buffer empty
    while (!(USART2->SR & (1 << 7))); // Wait for TXE
 8001d76:	bf00      	nop
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <WIFI_SendChar+0x28>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0f9      	beq.n	8001d78 <WIFI_SendChar+0xc>

    // Send character
    USART2->DR = c;
 8001d84:	4a03      	ldr	r2, [pc, #12]	; (8001d94 <WIFI_SendChar+0x28>)
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	6053      	str	r3, [r2, #4]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	40004400 	.word	0x40004400

08001d98 <WIFI_SendString>:

    // Return received character
    return USART2->DR;
}

void WIFI_SendString(const char *str) {
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001da0:	e006      	b.n	8001db0 <WIFI_SendString+0x18>
        WIFI_SendChar(*str++);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ffde 	bl	8001d6c <WIFI_SendChar>
    while (*str) {
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f4      	bne.n	8001da2 <WIFI_SendString+0xa>
    }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <WIFI_SendCommand>:

int WIFI_SendCommand(const char *cmd, uint32_t timeout) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	; 0x28
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
    WIFI_SendString(cmd);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ffe2 	bl	8001d98 <WIFI_SendString>

    uint32_t start = get_tick_count();
 8001dd4:	f7ff fe14 	bl	8001a00 <get_tick_count>
 8001dd8:	6238      	str	r0, [r7, #32]
    char response[16] = {0};
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	f107 0310 	add.w	r3, r7, #16
 8001de2:	2200      	movs	r2, #0
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
 8001de8:	609a      	str	r2, [r3, #8]
    uint8_t index = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    while ((get_tick_count() - start) < timeout) {
 8001df0:	e02c      	b.n	8001e4c <WIFI_SendCommand+0x88>
        if (USART2->SR & (1 << 5)) { // RXNE
 8001df2:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <WIFI_SendCommand+0xa4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d026      	beq.n	8001e4c <WIFI_SendCommand+0x88>
            char c = USART2->DR;
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <WIFI_SendCommand+0xa4>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	77fb      	strb	r3, [r7, #31]
            if (index < sizeof(response) - 1) {
 8001e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e08:	2b0e      	cmp	r3, #14
 8001e0a:	d809      	bhi.n	8001e20 <WIFI_SendCommand+0x5c>
                response[index++] = c;
 8001e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8001e16:	3328      	adds	r3, #40	; 0x28
 8001e18:	443b      	add	r3, r7
 8001e1a:	7ffa      	ldrb	r2, [r7, #31]
 8001e1c:	f803 2c1c 	strb.w	r2, [r3, #-28]
            }

            // Check for OK response
            if (strstr(response, "OK") != NULL) {
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	4911      	ldr	r1, [pc, #68]	; (8001e6c <WIFI_SendCommand+0xa8>)
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f990 	bl	800214c <strstr>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <WIFI_SendCommand+0x72>
                return 1;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e013      	b.n	8001e5e <WIFI_SendCommand+0x9a>
            }

            // Check for ERROR response
            if (strstr(response, "ERROR") != NULL) {
 8001e36:	f107 030c 	add.w	r3, r7, #12
 8001e3a:	490d      	ldr	r1, [pc, #52]	; (8001e70 <WIFI_SendCommand+0xac>)
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 f985 	bl	800214c <strstr>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <WIFI_SendCommand+0x88>
                return 0;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e008      	b.n	8001e5e <WIFI_SendCommand+0x9a>
    while ((get_tick_count() - start) < timeout) {
 8001e4c:	f7ff fdd8 	bl	8001a00 <get_tick_count>
 8001e50:	4602      	mov	r2, r0
 8001e52:	6a3b      	ldr	r3, [r7, #32]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d8ca      	bhi.n	8001df2 <WIFI_SendCommand+0x2e>
            }
        }
    }

    return 0;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3728      	adds	r7, #40	; 0x28
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40004400 	.word	0x40004400
 8001e6c:	08002d78 	.word	0x08002d78
 8001e70:	08002d7c 	.word	0x08002d7c

08001e74 <WIFI_SendLog>:

void WIFI_SendLog(const char *message) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b0ac      	sub	sp, #176	; 0xb0
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
    char buffer[128];

    // Connect to server
    snprintf(buffer, sizeof(buffer), "AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 8001e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e80:	4a1d      	ldr	r2, [pc, #116]	; (8001ef8 <WIFI_SendLog+0x84>)
 8001e82:	2180      	movs	r1, #128	; 0x80
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 f92d 	bl	80020e4 <sniprintf>
    WIFI_SendCommand(buffer, 2000);
 8001e8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e8e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff96 	bl	8001dc4 <WIFI_SendCommand>

    // Prepare data
    snprintf(buffer, sizeof(buffer), "GET /update?api_key=YOUR_API_KEY&field1=%s\r\n", message);
 8001e98:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4a17      	ldr	r2, [pc, #92]	; (8001efc <WIFI_SendLog+0x88>)
 8001ea0:	2180      	movs	r1, #128	; 0x80
 8001ea2:	f000 f91f 	bl	80020e4 <sniprintf>
    uint16_t length = strlen(buffer);
 8001ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff fdb2 	bl	8001a14 <strlen>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

    // Start sending data
    char length_cmd[32];
    snprintf(length_cmd, sizeof(length_cmd), "AT+CIPSEND=%d\r\n", length);
 8001eb6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8001eba:	f107 000c 	add.w	r0, r7, #12
 8001ebe:	4a10      	ldr	r2, [pc, #64]	; (8001f00 <WIFI_SendLog+0x8c>)
 8001ec0:	2120      	movs	r1, #32
 8001ec2:	f000 f90f 	bl	80020e4 <sniprintf>
    WIFI_SendCommand(length_cmd, 1000);
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff ff78 	bl	8001dc4 <WIFI_SendCommand>

    // Send actual data
    WIFI_SendString(buffer);
 8001ed4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff5d 	bl	8001d98 <WIFI_SendString>
    WIFI_SendChar(0x1A); // Ctrl+Z to send
 8001ede:	201a      	movs	r0, #26
 8001ee0:	f7ff ff44 	bl	8001d6c <WIFI_SendChar>

    // Close connection
    WIFI_SendCommand("AT+CIPCLOSE\r\n", 1000);
 8001ee4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ee8:	4806      	ldr	r0, [pc, #24]	; (8001f04 <WIFI_SendLog+0x90>)
 8001eea:	f7ff ff6b 	bl	8001dc4 <WIFI_SendCommand>
}
 8001eee:	bf00      	nop
 8001ef0:	37b0      	adds	r7, #176	; 0xb0
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	08002d84 	.word	0x08002d84
 8001efc:	08002db0 	.word	0x08002db0
 8001f00:	08002de0 	.word	0x08002de0
 8001f04:	08002df0 	.word	0x08002df0

08001f08 <WIFI_SendEncryptedLog>:

void WIFI_SendEncryptedLog(const char *encrypted_data, uint16_t length) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b094      	sub	sp, #80	; 0x50
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	460b      	mov	r3, r1
 8001f12:	807b      	strh	r3, [r7, #2]
    char buffer[64];

    // Connect to server
    snprintf(buffer, sizeof(buffer), "AT+CIPSTART=\"TCP\",\"your-server.com\",80\r\n");
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	4a1d      	ldr	r2, [pc, #116]	; (8001f90 <WIFI_SendEncryptedLog+0x88>)
 8001f1a:	2140      	movs	r1, #64	; 0x40
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f000 f8e1 	bl	80020e4 <sniprintf>
    WIFI_SendCommand(buffer, 2000);
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff ff4a 	bl	8001dc4 <WIFI_SendCommand>

    // Start sending data
    snprintf(buffer, sizeof(buffer), "AT+CIPSEND=%d\r\n", length);
 8001f30:	887b      	ldrh	r3, [r7, #2]
 8001f32:	f107 000c 	add.w	r0, r7, #12
 8001f36:	4a17      	ldr	r2, [pc, #92]	; (8001f94 <WIFI_SendEncryptedLog+0x8c>)
 8001f38:	2140      	movs	r1, #64	; 0x40
 8001f3a:	f000 f8d3 	bl	80020e4 <sniprintf>
    WIFI_SendCommand(buffer, 1000);
 8001f3e:	f107 030c 	add.w	r3, r7, #12
 8001f42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ff3c 	bl	8001dc4 <WIFI_SendCommand>

    // Send encrypted data
    for (uint16_t i = 0; i < length; i++) {
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001f52:	e00c      	b.n	8001f6e <WIFI_SendEncryptedLog+0x66>
        WIFI_SendChar(encrypted_data[i]);
 8001f54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ff04 	bl	8001d6c <WIFI_SendChar>
    for (uint16_t i = 0; i < length; i++) {
 8001f64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001f6e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d3ed      	bcc.n	8001f54 <WIFI_SendEncryptedLog+0x4c>
    }
    WIFI_SendChar(0x1A); // Ctrl+Z to send
 8001f78:	201a      	movs	r0, #26
 8001f7a:	f7ff fef7 	bl	8001d6c <WIFI_SendChar>

    // Close connection
    WIFI_SendCommand("AT+CIPCLOSE\r\n", 1000);
 8001f7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001f82:	4805      	ldr	r0, [pc, #20]	; (8001f98 <WIFI_SendEncryptedLog+0x90>)
 8001f84:	f7ff ff1e 	bl	8001dc4 <WIFI_SendCommand>
}
 8001f88:	bf00      	nop
 8001f8a:	3750      	adds	r7, #80	; 0x50
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	08002e00 	.word	0x08002e00
 8001f94:	08002de0 	.word	0x08002de0
 8001f98:	08002df0 	.word	0x08002df0

08001f9c <WIFI_HasCommand>:

uint8_t WIFI_HasCommand(void) {
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
    return (USART2->SR & (1 << 5)); // Check if data available
 8001fa0:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <WIFI_HasCommand+0x18>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	b2db      	uxtb	r3, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	40004400 	.word	0x40004400

08001fb8 <WIFI_GetCommand>:

void WIFI_GetCommand(char *buffer, uint16_t max_length) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	807b      	strh	r3, [r7, #2]
    uint16_t index = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	82fb      	strh	r3, [r7, #22]
    uint32_t start_time = get_tick_count();
 8001fc8:	f7ff fd1a 	bl	8001a00 <get_tick_count>
 8001fcc:	6138      	str	r0, [r7, #16]

    while (index < max_length - 1) {
 8001fce:	e020      	b.n	8002012 <WIFI_GetCommand+0x5a>
        if (USART2->SR & (1 << 5)) { // RXNE
 8001fd0:	4b28      	ldr	r3, [pc, #160]	; (8002074 <WIFI_GetCommand+0xbc>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d013      	beq.n	8002004 <WIFI_GetCommand+0x4c>
            char c = USART2->DR;
 8001fdc:	4b25      	ldr	r3, [pc, #148]	; (8002074 <WIFI_GetCommand+0xbc>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	73fb      	strb	r3, [r7, #15]
            buffer[index++] = c;
 8001fe2:	8afb      	ldrh	r3, [r7, #22]
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	82fa      	strh	r2, [r7, #22]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	701a      	strb	r2, [r3, #0]

            // Check for end of command (newline or carriage return)
            if (c == '\n' || c == '\r') {
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
 8001ff4:	2b0a      	cmp	r3, #10
 8001ff6:	d013      	beq.n	8002020 <WIFI_GetCommand+0x68>
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
 8001ffa:	2b0d      	cmp	r3, #13
 8001ffc:	d010      	beq.n	8002020 <WIFI_GetCommand+0x68>
                break;
            }

            start_time = get_tick_count(); // Reset timeout on each character
 8001ffe:	f7ff fcff 	bl	8001a00 <get_tick_count>
 8002002:	6138      	str	r0, [r7, #16]
        }

        // Timeout after 100ms of inactivity
        if ((get_tick_count() - start_time) > 100) {
 8002004:	f7ff fcfc 	bl	8001a00 <get_tick_count>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b64      	cmp	r3, #100	; 0x64
 8002010:	d805      	bhi.n	800201e <WIFI_GetCommand+0x66>
    while (index < max_length - 1) {
 8002012:	8afa      	ldrh	r2, [r7, #22]
 8002014:	887b      	ldrh	r3, [r7, #2]
 8002016:	3b01      	subs	r3, #1
 8002018:	429a      	cmp	r2, r3
 800201a:	dbd9      	blt.n	8001fd0 <WIFI_GetCommand+0x18>
 800201c:	e000      	b.n	8002020 <WIFI_GetCommand+0x68>
            break;
 800201e:	bf00      	nop
        }
    }

    buffer[index] = '\0'; // Null-terminate
 8002020:	8afb      	ldrh	r3, [r7, #22]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]

    // Remove trailing whitespace
    while (index > 0 && (buffer[index-1] == '\n' || buffer[index-1] == '\r' || buffer[index-1] == ' ')) {
 800202a:	e007      	b.n	800203c <WIFI_GetCommand+0x84>
        buffer[--index] = '\0';
 800202c:	8afb      	ldrh	r3, [r7, #22]
 800202e:	3b01      	subs	r3, #1
 8002030:	82fb      	strh	r3, [r7, #22]
 8002032:	8afb      	ldrh	r3, [r7, #22]
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	4413      	add	r3, r2
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
    while (index > 0 && (buffer[index-1] == '\n' || buffer[index-1] == '\r' || buffer[index-1] == ' ')) {
 800203c:	8afb      	ldrh	r3, [r7, #22]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d014      	beq.n	800206c <WIFI_GetCommand+0xb4>
 8002042:	8afb      	ldrh	r3, [r7, #22]
 8002044:	3b01      	subs	r3, #1
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b0a      	cmp	r3, #10
 800204e:	d0ed      	beq.n	800202c <WIFI_GetCommand+0x74>
 8002050:	8afb      	ldrh	r3, [r7, #22]
 8002052:	3b01      	subs	r3, #1
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b0d      	cmp	r3, #13
 800205c:	d0e6      	beq.n	800202c <WIFI_GetCommand+0x74>
 800205e:	8afb      	ldrh	r3, [r7, #22]
 8002060:	3b01      	subs	r3, #1
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b20      	cmp	r3, #32
 800206a:	d0df      	beq.n	800202c <WIFI_GetCommand+0x74>
    }
}
 800206c:	bf00      	nop
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40004400 	.word	0x40004400

08002078 <WIFI_IsConnected>:
    char command[128];
    snprintf(command, sizeof(command), "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
    WIFI_SendCommand(command, 10000); // 10 second timeout for connection
}

uint8_t WIFI_IsConnected(void) {
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
    WIFI_SendCommand("AT+CIPSTATUS\r\n", 1000);
 800207c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <WIFI_IsConnected+0x14>)
 8002082:	f7ff fe9f 	bl	8001dc4 <WIFI_SendCommand>

    // Would need to parse response to check connection status
    // For simplicity, return true if we can get a response
    return 1;
 8002086:	2301      	movs	r3, #1
}
 8002088:	4618      	mov	r0, r3
 800208a:	bd80      	pop	{r7, pc}
 800208c:	08002e44 	.word	0x08002e44

08002090 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002090:	480d      	ldr	r0, [pc, #52]	; (80020c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002092:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002094:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002098:	480c      	ldr	r0, [pc, #48]	; (80020cc <LoopForever+0x6>)
  ldr r1, =_edata
 800209a:	490d      	ldr	r1, [pc, #52]	; (80020d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800209c:	4a0d      	ldr	r2, [pc, #52]	; (80020d4 <LoopForever+0xe>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a0:	e002      	b.n	80020a8 <LoopCopyDataInit>

080020a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a6:	3304      	adds	r3, #4

080020a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ac:	d3f9      	bcc.n	80020a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020b0:	4c0a      	ldr	r4, [pc, #40]	; (80020dc <LoopForever+0x16>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b4:	e001      	b.n	80020ba <LoopFillZerobss>

080020b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b8:	3204      	adds	r2, #4

080020ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020bc:	d3fb      	bcc.n	80020b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020be:	f000 f861 	bl	8002184 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020c2:	f7fe fa75 	bl	80005b0 <main>

080020c6 <LoopForever>:

LoopForever:
  b LoopForever
 80020c6:	e7fe      	b.n	80020c6 <LoopForever>
  ldr   r0, =_estack
 80020c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80020d4:	08003034 	.word	0x08003034
  ldr r2, =_sbss
 80020d8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80020dc:	20000214 	.word	0x20000214

080020e0 <Default_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020e0:	e7fe      	b.n	80020e0 <Default_Handler>
	...

080020e4 <sniprintf>:
 80020e4:	b40c      	push	{r2, r3}
 80020e6:	b530      	push	{r4, r5, lr}
 80020e8:	4b17      	ldr	r3, [pc, #92]	; (8002148 <sniprintf+0x64>)
 80020ea:	1e0c      	subs	r4, r1, #0
 80020ec:	681d      	ldr	r5, [r3, #0]
 80020ee:	b09d      	sub	sp, #116	; 0x74
 80020f0:	da08      	bge.n	8002104 <sniprintf+0x20>
 80020f2:	238b      	movs	r3, #139	; 0x8b
 80020f4:	602b      	str	r3, [r5, #0]
 80020f6:	f04f 30ff 	mov.w	r0, #4294967295
 80020fa:	b01d      	add	sp, #116	; 0x74
 80020fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002100:	b002      	add	sp, #8
 8002102:	4770      	bx	lr
 8002104:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002108:	f8ad 3014 	strh.w	r3, [sp, #20]
 800210c:	bf14      	ite	ne
 800210e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002112:	4623      	moveq	r3, r4
 8002114:	9304      	str	r3, [sp, #16]
 8002116:	9307      	str	r3, [sp, #28]
 8002118:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800211c:	9002      	str	r0, [sp, #8]
 800211e:	9006      	str	r0, [sp, #24]
 8002120:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002124:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002126:	ab21      	add	r3, sp, #132	; 0x84
 8002128:	a902      	add	r1, sp, #8
 800212a:	4628      	mov	r0, r5
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	f000 f99f 	bl	8002470 <_svfiprintf_r>
 8002132:	1c43      	adds	r3, r0, #1
 8002134:	bfbc      	itt	lt
 8002136:	238b      	movlt	r3, #139	; 0x8b
 8002138:	602b      	strlt	r3, [r5, #0]
 800213a:	2c00      	cmp	r4, #0
 800213c:	d0dd      	beq.n	80020fa <sniprintf+0x16>
 800213e:	9b02      	ldr	r3, [sp, #8]
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e7d9      	b.n	80020fa <sniprintf+0x16>
 8002146:	bf00      	nop
 8002148:	20000050 	.word	0x20000050

0800214c <strstr>:
 800214c:	780a      	ldrb	r2, [r1, #0]
 800214e:	b570      	push	{r4, r5, r6, lr}
 8002150:	b96a      	cbnz	r2, 800216e <strstr+0x22>
 8002152:	bd70      	pop	{r4, r5, r6, pc}
 8002154:	429a      	cmp	r2, r3
 8002156:	d109      	bne.n	800216c <strstr+0x20>
 8002158:	460c      	mov	r4, r1
 800215a:	4605      	mov	r5, r0
 800215c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f6      	beq.n	8002152 <strstr+0x6>
 8002164:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8002168:	429e      	cmp	r6, r3
 800216a:	d0f7      	beq.n	800215c <strstr+0x10>
 800216c:	3001      	adds	r0, #1
 800216e:	7803      	ldrb	r3, [r0, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1ef      	bne.n	8002154 <strstr+0x8>
 8002174:	4618      	mov	r0, r3
 8002176:	e7ec      	b.n	8002152 <strstr+0x6>

08002178 <__errno>:
 8002178:	4b01      	ldr	r3, [pc, #4]	; (8002180 <__errno+0x8>)
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000050 	.word	0x20000050

08002184 <__libc_init_array>:
 8002184:	b570      	push	{r4, r5, r6, lr}
 8002186:	4d0d      	ldr	r5, [pc, #52]	; (80021bc <__libc_init_array+0x38>)
 8002188:	4c0d      	ldr	r4, [pc, #52]	; (80021c0 <__libc_init_array+0x3c>)
 800218a:	1b64      	subs	r4, r4, r5
 800218c:	10a4      	asrs	r4, r4, #2
 800218e:	2600      	movs	r6, #0
 8002190:	42a6      	cmp	r6, r4
 8002192:	d109      	bne.n	80021a8 <__libc_init_array+0x24>
 8002194:	4d0b      	ldr	r5, [pc, #44]	; (80021c4 <__libc_init_array+0x40>)
 8002196:	4c0c      	ldr	r4, [pc, #48]	; (80021c8 <__libc_init_array+0x44>)
 8002198:	f000 fc40 	bl	8002a1c <_init>
 800219c:	1b64      	subs	r4, r4, r5
 800219e:	10a4      	asrs	r4, r4, #2
 80021a0:	2600      	movs	r6, #0
 80021a2:	42a6      	cmp	r6, r4
 80021a4:	d105      	bne.n	80021b2 <__libc_init_array+0x2e>
 80021a6:	bd70      	pop	{r4, r5, r6, pc}
 80021a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80021ac:	4798      	blx	r3
 80021ae:	3601      	adds	r6, #1
 80021b0:	e7ee      	b.n	8002190 <__libc_init_array+0xc>
 80021b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b6:	4798      	blx	r3
 80021b8:	3601      	adds	r6, #1
 80021ba:	e7f2      	b.n	80021a2 <__libc_init_array+0x1e>
 80021bc:	0800302c 	.word	0x0800302c
 80021c0:	0800302c 	.word	0x0800302c
 80021c4:	0800302c 	.word	0x0800302c
 80021c8:	08003030 	.word	0x08003030

080021cc <__retarget_lock_acquire_recursive>:
 80021cc:	4770      	bx	lr

080021ce <__retarget_lock_release_recursive>:
 80021ce:	4770      	bx	lr

080021d0 <_free_r>:
 80021d0:	b538      	push	{r3, r4, r5, lr}
 80021d2:	4605      	mov	r5, r0
 80021d4:	2900      	cmp	r1, #0
 80021d6:	d041      	beq.n	800225c <_free_r+0x8c>
 80021d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021dc:	1f0c      	subs	r4, r1, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bfb8      	it	lt
 80021e2:	18e4      	addlt	r4, r4, r3
 80021e4:	f000 f8de 	bl	80023a4 <__malloc_lock>
 80021e8:	4a1d      	ldr	r2, [pc, #116]	; (8002260 <_free_r+0x90>)
 80021ea:	6813      	ldr	r3, [r2, #0]
 80021ec:	b933      	cbnz	r3, 80021fc <_free_r+0x2c>
 80021ee:	6063      	str	r3, [r4, #4]
 80021f0:	6014      	str	r4, [r2, #0]
 80021f2:	4628      	mov	r0, r5
 80021f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021f8:	f000 b8da 	b.w	80023b0 <__malloc_unlock>
 80021fc:	42a3      	cmp	r3, r4
 80021fe:	d908      	bls.n	8002212 <_free_r+0x42>
 8002200:	6820      	ldr	r0, [r4, #0]
 8002202:	1821      	adds	r1, r4, r0
 8002204:	428b      	cmp	r3, r1
 8002206:	bf01      	itttt	eq
 8002208:	6819      	ldreq	r1, [r3, #0]
 800220a:	685b      	ldreq	r3, [r3, #4]
 800220c:	1809      	addeq	r1, r1, r0
 800220e:	6021      	streq	r1, [r4, #0]
 8002210:	e7ed      	b.n	80021ee <_free_r+0x1e>
 8002212:	461a      	mov	r2, r3
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	b10b      	cbz	r3, 800221c <_free_r+0x4c>
 8002218:	42a3      	cmp	r3, r4
 800221a:	d9fa      	bls.n	8002212 <_free_r+0x42>
 800221c:	6811      	ldr	r1, [r2, #0]
 800221e:	1850      	adds	r0, r2, r1
 8002220:	42a0      	cmp	r0, r4
 8002222:	d10b      	bne.n	800223c <_free_r+0x6c>
 8002224:	6820      	ldr	r0, [r4, #0]
 8002226:	4401      	add	r1, r0
 8002228:	1850      	adds	r0, r2, r1
 800222a:	4283      	cmp	r3, r0
 800222c:	6011      	str	r1, [r2, #0]
 800222e:	d1e0      	bne.n	80021f2 <_free_r+0x22>
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	6053      	str	r3, [r2, #4]
 8002236:	4408      	add	r0, r1
 8002238:	6010      	str	r0, [r2, #0]
 800223a:	e7da      	b.n	80021f2 <_free_r+0x22>
 800223c:	d902      	bls.n	8002244 <_free_r+0x74>
 800223e:	230c      	movs	r3, #12
 8002240:	602b      	str	r3, [r5, #0]
 8002242:	e7d6      	b.n	80021f2 <_free_r+0x22>
 8002244:	6820      	ldr	r0, [r4, #0]
 8002246:	1821      	adds	r1, r4, r0
 8002248:	428b      	cmp	r3, r1
 800224a:	bf04      	itt	eq
 800224c:	6819      	ldreq	r1, [r3, #0]
 800224e:	685b      	ldreq	r3, [r3, #4]
 8002250:	6063      	str	r3, [r4, #4]
 8002252:	bf04      	itt	eq
 8002254:	1809      	addeq	r1, r1, r0
 8002256:	6021      	streq	r1, [r4, #0]
 8002258:	6054      	str	r4, [r2, #4]
 800225a:	e7ca      	b.n	80021f2 <_free_r+0x22>
 800225c:	bd38      	pop	{r3, r4, r5, pc}
 800225e:	bf00      	nop
 8002260:	2000020c 	.word	0x2000020c

08002264 <sbrk_aligned>:
 8002264:	b570      	push	{r4, r5, r6, lr}
 8002266:	4e0e      	ldr	r6, [pc, #56]	; (80022a0 <sbrk_aligned+0x3c>)
 8002268:	460c      	mov	r4, r1
 800226a:	6831      	ldr	r1, [r6, #0]
 800226c:	4605      	mov	r5, r0
 800226e:	b911      	cbnz	r1, 8002276 <sbrk_aligned+0x12>
 8002270:	f000 fb8c 	bl	800298c <_sbrk_r>
 8002274:	6030      	str	r0, [r6, #0]
 8002276:	4621      	mov	r1, r4
 8002278:	4628      	mov	r0, r5
 800227a:	f000 fb87 	bl	800298c <_sbrk_r>
 800227e:	1c43      	adds	r3, r0, #1
 8002280:	d00a      	beq.n	8002298 <sbrk_aligned+0x34>
 8002282:	1cc4      	adds	r4, r0, #3
 8002284:	f024 0403 	bic.w	r4, r4, #3
 8002288:	42a0      	cmp	r0, r4
 800228a:	d007      	beq.n	800229c <sbrk_aligned+0x38>
 800228c:	1a21      	subs	r1, r4, r0
 800228e:	4628      	mov	r0, r5
 8002290:	f000 fb7c 	bl	800298c <_sbrk_r>
 8002294:	3001      	adds	r0, #1
 8002296:	d101      	bne.n	800229c <sbrk_aligned+0x38>
 8002298:	f04f 34ff 	mov.w	r4, #4294967295
 800229c:	4620      	mov	r0, r4
 800229e:	bd70      	pop	{r4, r5, r6, pc}
 80022a0:	20000210 	.word	0x20000210

080022a4 <_malloc_r>:
 80022a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022a8:	1ccd      	adds	r5, r1, #3
 80022aa:	f025 0503 	bic.w	r5, r5, #3
 80022ae:	3508      	adds	r5, #8
 80022b0:	2d0c      	cmp	r5, #12
 80022b2:	bf38      	it	cc
 80022b4:	250c      	movcc	r5, #12
 80022b6:	2d00      	cmp	r5, #0
 80022b8:	4607      	mov	r7, r0
 80022ba:	db01      	blt.n	80022c0 <_malloc_r+0x1c>
 80022bc:	42a9      	cmp	r1, r5
 80022be:	d905      	bls.n	80022cc <_malloc_r+0x28>
 80022c0:	230c      	movs	r3, #12
 80022c2:	603b      	str	r3, [r7, #0]
 80022c4:	2600      	movs	r6, #0
 80022c6:	4630      	mov	r0, r6
 80022c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80023a0 <_malloc_r+0xfc>
 80022d0:	f000 f868 	bl	80023a4 <__malloc_lock>
 80022d4:	f8d8 3000 	ldr.w	r3, [r8]
 80022d8:	461c      	mov	r4, r3
 80022da:	bb5c      	cbnz	r4, 8002334 <_malloc_r+0x90>
 80022dc:	4629      	mov	r1, r5
 80022de:	4638      	mov	r0, r7
 80022e0:	f7ff ffc0 	bl	8002264 <sbrk_aligned>
 80022e4:	1c43      	adds	r3, r0, #1
 80022e6:	4604      	mov	r4, r0
 80022e8:	d155      	bne.n	8002396 <_malloc_r+0xf2>
 80022ea:	f8d8 4000 	ldr.w	r4, [r8]
 80022ee:	4626      	mov	r6, r4
 80022f0:	2e00      	cmp	r6, #0
 80022f2:	d145      	bne.n	8002380 <_malloc_r+0xdc>
 80022f4:	2c00      	cmp	r4, #0
 80022f6:	d048      	beq.n	800238a <_malloc_r+0xe6>
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	4631      	mov	r1, r6
 80022fc:	4638      	mov	r0, r7
 80022fe:	eb04 0903 	add.w	r9, r4, r3
 8002302:	f000 fb43 	bl	800298c <_sbrk_r>
 8002306:	4581      	cmp	r9, r0
 8002308:	d13f      	bne.n	800238a <_malloc_r+0xe6>
 800230a:	6821      	ldr	r1, [r4, #0]
 800230c:	1a6d      	subs	r5, r5, r1
 800230e:	4629      	mov	r1, r5
 8002310:	4638      	mov	r0, r7
 8002312:	f7ff ffa7 	bl	8002264 <sbrk_aligned>
 8002316:	3001      	adds	r0, #1
 8002318:	d037      	beq.n	800238a <_malloc_r+0xe6>
 800231a:	6823      	ldr	r3, [r4, #0]
 800231c:	442b      	add	r3, r5
 800231e:	6023      	str	r3, [r4, #0]
 8002320:	f8d8 3000 	ldr.w	r3, [r8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d038      	beq.n	800239a <_malloc_r+0xf6>
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	42a2      	cmp	r2, r4
 800232c:	d12b      	bne.n	8002386 <_malloc_r+0xe2>
 800232e:	2200      	movs	r2, #0
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	e00f      	b.n	8002354 <_malloc_r+0xb0>
 8002334:	6822      	ldr	r2, [r4, #0]
 8002336:	1b52      	subs	r2, r2, r5
 8002338:	d41f      	bmi.n	800237a <_malloc_r+0xd6>
 800233a:	2a0b      	cmp	r2, #11
 800233c:	d917      	bls.n	800236e <_malloc_r+0xca>
 800233e:	1961      	adds	r1, r4, r5
 8002340:	42a3      	cmp	r3, r4
 8002342:	6025      	str	r5, [r4, #0]
 8002344:	bf18      	it	ne
 8002346:	6059      	strne	r1, [r3, #4]
 8002348:	6863      	ldr	r3, [r4, #4]
 800234a:	bf08      	it	eq
 800234c:	f8c8 1000 	streq.w	r1, [r8]
 8002350:	5162      	str	r2, [r4, r5]
 8002352:	604b      	str	r3, [r1, #4]
 8002354:	4638      	mov	r0, r7
 8002356:	f104 060b 	add.w	r6, r4, #11
 800235a:	f000 f829 	bl	80023b0 <__malloc_unlock>
 800235e:	f026 0607 	bic.w	r6, r6, #7
 8002362:	1d23      	adds	r3, r4, #4
 8002364:	1af2      	subs	r2, r6, r3
 8002366:	d0ae      	beq.n	80022c6 <_malloc_r+0x22>
 8002368:	1b9b      	subs	r3, r3, r6
 800236a:	50a3      	str	r3, [r4, r2]
 800236c:	e7ab      	b.n	80022c6 <_malloc_r+0x22>
 800236e:	42a3      	cmp	r3, r4
 8002370:	6862      	ldr	r2, [r4, #4]
 8002372:	d1dd      	bne.n	8002330 <_malloc_r+0x8c>
 8002374:	f8c8 2000 	str.w	r2, [r8]
 8002378:	e7ec      	b.n	8002354 <_malloc_r+0xb0>
 800237a:	4623      	mov	r3, r4
 800237c:	6864      	ldr	r4, [r4, #4]
 800237e:	e7ac      	b.n	80022da <_malloc_r+0x36>
 8002380:	4634      	mov	r4, r6
 8002382:	6876      	ldr	r6, [r6, #4]
 8002384:	e7b4      	b.n	80022f0 <_malloc_r+0x4c>
 8002386:	4613      	mov	r3, r2
 8002388:	e7cc      	b.n	8002324 <_malloc_r+0x80>
 800238a:	230c      	movs	r3, #12
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	4638      	mov	r0, r7
 8002390:	f000 f80e 	bl	80023b0 <__malloc_unlock>
 8002394:	e797      	b.n	80022c6 <_malloc_r+0x22>
 8002396:	6025      	str	r5, [r4, #0]
 8002398:	e7dc      	b.n	8002354 <_malloc_r+0xb0>
 800239a:	605b      	str	r3, [r3, #4]
 800239c:	deff      	udf	#255	; 0xff
 800239e:	bf00      	nop
 80023a0:	2000020c 	.word	0x2000020c

080023a4 <__malloc_lock>:
 80023a4:	4801      	ldr	r0, [pc, #4]	; (80023ac <__malloc_lock+0x8>)
 80023a6:	f7ff bf11 	b.w	80021cc <__retarget_lock_acquire_recursive>
 80023aa:	bf00      	nop
 80023ac:	20000208 	.word	0x20000208

080023b0 <__malloc_unlock>:
 80023b0:	4801      	ldr	r0, [pc, #4]	; (80023b8 <__malloc_unlock+0x8>)
 80023b2:	f7ff bf0c 	b.w	80021ce <__retarget_lock_release_recursive>
 80023b6:	bf00      	nop
 80023b8:	20000208 	.word	0x20000208

080023bc <__ssputs_r>:
 80023bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023c0:	688e      	ldr	r6, [r1, #8]
 80023c2:	461f      	mov	r7, r3
 80023c4:	42be      	cmp	r6, r7
 80023c6:	680b      	ldr	r3, [r1, #0]
 80023c8:	4682      	mov	sl, r0
 80023ca:	460c      	mov	r4, r1
 80023cc:	4690      	mov	r8, r2
 80023ce:	d82c      	bhi.n	800242a <__ssputs_r+0x6e>
 80023d0:	898a      	ldrh	r2, [r1, #12]
 80023d2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80023d6:	d026      	beq.n	8002426 <__ssputs_r+0x6a>
 80023d8:	6965      	ldr	r5, [r4, #20]
 80023da:	6909      	ldr	r1, [r1, #16]
 80023dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80023e0:	eba3 0901 	sub.w	r9, r3, r1
 80023e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80023e8:	1c7b      	adds	r3, r7, #1
 80023ea:	444b      	add	r3, r9
 80023ec:	106d      	asrs	r5, r5, #1
 80023ee:	429d      	cmp	r5, r3
 80023f0:	bf38      	it	cc
 80023f2:	461d      	movcc	r5, r3
 80023f4:	0553      	lsls	r3, r2, #21
 80023f6:	d527      	bpl.n	8002448 <__ssputs_r+0x8c>
 80023f8:	4629      	mov	r1, r5
 80023fa:	f7ff ff53 	bl	80022a4 <_malloc_r>
 80023fe:	4606      	mov	r6, r0
 8002400:	b360      	cbz	r0, 800245c <__ssputs_r+0xa0>
 8002402:	6921      	ldr	r1, [r4, #16]
 8002404:	464a      	mov	r2, r9
 8002406:	f7ff fb3c 	bl	8001a82 <memcpy>
 800240a:	89a3      	ldrh	r3, [r4, #12]
 800240c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002414:	81a3      	strh	r3, [r4, #12]
 8002416:	6126      	str	r6, [r4, #16]
 8002418:	6165      	str	r5, [r4, #20]
 800241a:	444e      	add	r6, r9
 800241c:	eba5 0509 	sub.w	r5, r5, r9
 8002420:	6026      	str	r6, [r4, #0]
 8002422:	60a5      	str	r5, [r4, #8]
 8002424:	463e      	mov	r6, r7
 8002426:	42be      	cmp	r6, r7
 8002428:	d900      	bls.n	800242c <__ssputs_r+0x70>
 800242a:	463e      	mov	r6, r7
 800242c:	6820      	ldr	r0, [r4, #0]
 800242e:	4632      	mov	r2, r6
 8002430:	4641      	mov	r1, r8
 8002432:	f7ff fb87 	bl	8001b44 <memmove>
 8002436:	68a3      	ldr	r3, [r4, #8]
 8002438:	1b9b      	subs	r3, r3, r6
 800243a:	60a3      	str	r3, [r4, #8]
 800243c:	6823      	ldr	r3, [r4, #0]
 800243e:	4433      	add	r3, r6
 8002440:	6023      	str	r3, [r4, #0]
 8002442:	2000      	movs	r0, #0
 8002444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002448:	462a      	mov	r2, r5
 800244a:	f000 faaf 	bl	80029ac <_realloc_r>
 800244e:	4606      	mov	r6, r0
 8002450:	2800      	cmp	r0, #0
 8002452:	d1e0      	bne.n	8002416 <__ssputs_r+0x5a>
 8002454:	6921      	ldr	r1, [r4, #16]
 8002456:	4650      	mov	r0, sl
 8002458:	f7ff feba 	bl	80021d0 <_free_r>
 800245c:	230c      	movs	r3, #12
 800245e:	f8ca 3000 	str.w	r3, [sl]
 8002462:	89a3      	ldrh	r3, [r4, #12]
 8002464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002468:	81a3      	strh	r3, [r4, #12]
 800246a:	f04f 30ff 	mov.w	r0, #4294967295
 800246e:	e7e9      	b.n	8002444 <__ssputs_r+0x88>

08002470 <_svfiprintf_r>:
 8002470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002474:	4698      	mov	r8, r3
 8002476:	898b      	ldrh	r3, [r1, #12]
 8002478:	061b      	lsls	r3, r3, #24
 800247a:	b09d      	sub	sp, #116	; 0x74
 800247c:	4607      	mov	r7, r0
 800247e:	460d      	mov	r5, r1
 8002480:	4614      	mov	r4, r2
 8002482:	d50e      	bpl.n	80024a2 <_svfiprintf_r+0x32>
 8002484:	690b      	ldr	r3, [r1, #16]
 8002486:	b963      	cbnz	r3, 80024a2 <_svfiprintf_r+0x32>
 8002488:	2140      	movs	r1, #64	; 0x40
 800248a:	f7ff ff0b 	bl	80022a4 <_malloc_r>
 800248e:	6028      	str	r0, [r5, #0]
 8002490:	6128      	str	r0, [r5, #16]
 8002492:	b920      	cbnz	r0, 800249e <_svfiprintf_r+0x2e>
 8002494:	230c      	movs	r3, #12
 8002496:	603b      	str	r3, [r7, #0]
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	e0d0      	b.n	8002640 <_svfiprintf_r+0x1d0>
 800249e:	2340      	movs	r3, #64	; 0x40
 80024a0:	616b      	str	r3, [r5, #20]
 80024a2:	2300      	movs	r3, #0
 80024a4:	9309      	str	r3, [sp, #36]	; 0x24
 80024a6:	2320      	movs	r3, #32
 80024a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80024ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80024b0:	2330      	movs	r3, #48	; 0x30
 80024b2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002658 <_svfiprintf_r+0x1e8>
 80024b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80024ba:	f04f 0901 	mov.w	r9, #1
 80024be:	4623      	mov	r3, r4
 80024c0:	469a      	mov	sl, r3
 80024c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80024c6:	b10a      	cbz	r2, 80024cc <_svfiprintf_r+0x5c>
 80024c8:	2a25      	cmp	r2, #37	; 0x25
 80024ca:	d1f9      	bne.n	80024c0 <_svfiprintf_r+0x50>
 80024cc:	ebba 0b04 	subs.w	fp, sl, r4
 80024d0:	d00b      	beq.n	80024ea <_svfiprintf_r+0x7a>
 80024d2:	465b      	mov	r3, fp
 80024d4:	4622      	mov	r2, r4
 80024d6:	4629      	mov	r1, r5
 80024d8:	4638      	mov	r0, r7
 80024da:	f7ff ff6f 	bl	80023bc <__ssputs_r>
 80024de:	3001      	adds	r0, #1
 80024e0:	f000 80a9 	beq.w	8002636 <_svfiprintf_r+0x1c6>
 80024e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80024e6:	445a      	add	r2, fp
 80024e8:	9209      	str	r2, [sp, #36]	; 0x24
 80024ea:	f89a 3000 	ldrb.w	r3, [sl]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f000 80a1 	beq.w	8002636 <_svfiprintf_r+0x1c6>
 80024f4:	2300      	movs	r3, #0
 80024f6:	f04f 32ff 	mov.w	r2, #4294967295
 80024fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024fe:	f10a 0a01 	add.w	sl, sl, #1
 8002502:	9304      	str	r3, [sp, #16]
 8002504:	9307      	str	r3, [sp, #28]
 8002506:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800250a:	931a      	str	r3, [sp, #104]	; 0x68
 800250c:	4654      	mov	r4, sl
 800250e:	2205      	movs	r2, #5
 8002510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002514:	4850      	ldr	r0, [pc, #320]	; (8002658 <_svfiprintf_r+0x1e8>)
 8002516:	f7fd fe5b 	bl	80001d0 <memchr>
 800251a:	9a04      	ldr	r2, [sp, #16]
 800251c:	b9d8      	cbnz	r0, 8002556 <_svfiprintf_r+0xe6>
 800251e:	06d0      	lsls	r0, r2, #27
 8002520:	bf44      	itt	mi
 8002522:	2320      	movmi	r3, #32
 8002524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002528:	0711      	lsls	r1, r2, #28
 800252a:	bf44      	itt	mi
 800252c:	232b      	movmi	r3, #43	; 0x2b
 800252e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002532:	f89a 3000 	ldrb.w	r3, [sl]
 8002536:	2b2a      	cmp	r3, #42	; 0x2a
 8002538:	d015      	beq.n	8002566 <_svfiprintf_r+0xf6>
 800253a:	9a07      	ldr	r2, [sp, #28]
 800253c:	4654      	mov	r4, sl
 800253e:	2000      	movs	r0, #0
 8002540:	f04f 0c0a 	mov.w	ip, #10
 8002544:	4621      	mov	r1, r4
 8002546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800254a:	3b30      	subs	r3, #48	; 0x30
 800254c:	2b09      	cmp	r3, #9
 800254e:	d94d      	bls.n	80025ec <_svfiprintf_r+0x17c>
 8002550:	b1b0      	cbz	r0, 8002580 <_svfiprintf_r+0x110>
 8002552:	9207      	str	r2, [sp, #28]
 8002554:	e014      	b.n	8002580 <_svfiprintf_r+0x110>
 8002556:	eba0 0308 	sub.w	r3, r0, r8
 800255a:	fa09 f303 	lsl.w	r3, r9, r3
 800255e:	4313      	orrs	r3, r2
 8002560:	9304      	str	r3, [sp, #16]
 8002562:	46a2      	mov	sl, r4
 8002564:	e7d2      	b.n	800250c <_svfiprintf_r+0x9c>
 8002566:	9b03      	ldr	r3, [sp, #12]
 8002568:	1d19      	adds	r1, r3, #4
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	9103      	str	r1, [sp, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	bfbb      	ittet	lt
 8002572:	425b      	neglt	r3, r3
 8002574:	f042 0202 	orrlt.w	r2, r2, #2
 8002578:	9307      	strge	r3, [sp, #28]
 800257a:	9307      	strlt	r3, [sp, #28]
 800257c:	bfb8      	it	lt
 800257e:	9204      	strlt	r2, [sp, #16]
 8002580:	7823      	ldrb	r3, [r4, #0]
 8002582:	2b2e      	cmp	r3, #46	; 0x2e
 8002584:	d10c      	bne.n	80025a0 <_svfiprintf_r+0x130>
 8002586:	7863      	ldrb	r3, [r4, #1]
 8002588:	2b2a      	cmp	r3, #42	; 0x2a
 800258a:	d134      	bne.n	80025f6 <_svfiprintf_r+0x186>
 800258c:	9b03      	ldr	r3, [sp, #12]
 800258e:	1d1a      	adds	r2, r3, #4
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	9203      	str	r2, [sp, #12]
 8002594:	2b00      	cmp	r3, #0
 8002596:	bfb8      	it	lt
 8002598:	f04f 33ff 	movlt.w	r3, #4294967295
 800259c:	3402      	adds	r4, #2
 800259e:	9305      	str	r3, [sp, #20]
 80025a0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800265c <_svfiprintf_r+0x1ec>
 80025a4:	7821      	ldrb	r1, [r4, #0]
 80025a6:	2203      	movs	r2, #3
 80025a8:	4650      	mov	r0, sl
 80025aa:	f7fd fe11 	bl	80001d0 <memchr>
 80025ae:	b138      	cbz	r0, 80025c0 <_svfiprintf_r+0x150>
 80025b0:	9b04      	ldr	r3, [sp, #16]
 80025b2:	eba0 000a 	sub.w	r0, r0, sl
 80025b6:	2240      	movs	r2, #64	; 0x40
 80025b8:	4082      	lsls	r2, r0
 80025ba:	4313      	orrs	r3, r2
 80025bc:	3401      	adds	r4, #1
 80025be:	9304      	str	r3, [sp, #16]
 80025c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025c4:	4826      	ldr	r0, [pc, #152]	; (8002660 <_svfiprintf_r+0x1f0>)
 80025c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80025ca:	2206      	movs	r2, #6
 80025cc:	f7fd fe00 	bl	80001d0 <memchr>
 80025d0:	2800      	cmp	r0, #0
 80025d2:	d038      	beq.n	8002646 <_svfiprintf_r+0x1d6>
 80025d4:	4b23      	ldr	r3, [pc, #140]	; (8002664 <_svfiprintf_r+0x1f4>)
 80025d6:	bb1b      	cbnz	r3, 8002620 <_svfiprintf_r+0x1b0>
 80025d8:	9b03      	ldr	r3, [sp, #12]
 80025da:	3307      	adds	r3, #7
 80025dc:	f023 0307 	bic.w	r3, r3, #7
 80025e0:	3308      	adds	r3, #8
 80025e2:	9303      	str	r3, [sp, #12]
 80025e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025e6:	4433      	add	r3, r6
 80025e8:	9309      	str	r3, [sp, #36]	; 0x24
 80025ea:	e768      	b.n	80024be <_svfiprintf_r+0x4e>
 80025ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80025f0:	460c      	mov	r4, r1
 80025f2:	2001      	movs	r0, #1
 80025f4:	e7a6      	b.n	8002544 <_svfiprintf_r+0xd4>
 80025f6:	2300      	movs	r3, #0
 80025f8:	3401      	adds	r4, #1
 80025fa:	9305      	str	r3, [sp, #20]
 80025fc:	4619      	mov	r1, r3
 80025fe:	f04f 0c0a 	mov.w	ip, #10
 8002602:	4620      	mov	r0, r4
 8002604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002608:	3a30      	subs	r2, #48	; 0x30
 800260a:	2a09      	cmp	r2, #9
 800260c:	d903      	bls.n	8002616 <_svfiprintf_r+0x1a6>
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0c6      	beq.n	80025a0 <_svfiprintf_r+0x130>
 8002612:	9105      	str	r1, [sp, #20]
 8002614:	e7c4      	b.n	80025a0 <_svfiprintf_r+0x130>
 8002616:	fb0c 2101 	mla	r1, ip, r1, r2
 800261a:	4604      	mov	r4, r0
 800261c:	2301      	movs	r3, #1
 800261e:	e7f0      	b.n	8002602 <_svfiprintf_r+0x192>
 8002620:	ab03      	add	r3, sp, #12
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	462a      	mov	r2, r5
 8002626:	4b10      	ldr	r3, [pc, #64]	; (8002668 <_svfiprintf_r+0x1f8>)
 8002628:	a904      	add	r1, sp, #16
 800262a:	4638      	mov	r0, r7
 800262c:	f3af 8000 	nop.w
 8002630:	1c42      	adds	r2, r0, #1
 8002632:	4606      	mov	r6, r0
 8002634:	d1d6      	bne.n	80025e4 <_svfiprintf_r+0x174>
 8002636:	89ab      	ldrh	r3, [r5, #12]
 8002638:	065b      	lsls	r3, r3, #25
 800263a:	f53f af2d 	bmi.w	8002498 <_svfiprintf_r+0x28>
 800263e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002640:	b01d      	add	sp, #116	; 0x74
 8002642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002646:	ab03      	add	r3, sp, #12
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	462a      	mov	r2, r5
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <_svfiprintf_r+0x1f8>)
 800264e:	a904      	add	r1, sp, #16
 8002650:	4638      	mov	r0, r7
 8002652:	f000 f879 	bl	8002748 <_printf_i>
 8002656:	e7eb      	b.n	8002630 <_svfiprintf_r+0x1c0>
 8002658:	08002ff8 	.word	0x08002ff8
 800265c:	08002ffe 	.word	0x08002ffe
 8002660:	08003002 	.word	0x08003002
 8002664:	00000000 	.word	0x00000000
 8002668:	080023bd 	.word	0x080023bd

0800266c <_printf_common>:
 800266c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002670:	4616      	mov	r6, r2
 8002672:	4699      	mov	r9, r3
 8002674:	688a      	ldr	r2, [r1, #8]
 8002676:	690b      	ldr	r3, [r1, #16]
 8002678:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800267c:	4293      	cmp	r3, r2
 800267e:	bfb8      	it	lt
 8002680:	4613      	movlt	r3, r2
 8002682:	6033      	str	r3, [r6, #0]
 8002684:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002688:	4607      	mov	r7, r0
 800268a:	460c      	mov	r4, r1
 800268c:	b10a      	cbz	r2, 8002692 <_printf_common+0x26>
 800268e:	3301      	adds	r3, #1
 8002690:	6033      	str	r3, [r6, #0]
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	0699      	lsls	r1, r3, #26
 8002696:	bf42      	ittt	mi
 8002698:	6833      	ldrmi	r3, [r6, #0]
 800269a:	3302      	addmi	r3, #2
 800269c:	6033      	strmi	r3, [r6, #0]
 800269e:	6825      	ldr	r5, [r4, #0]
 80026a0:	f015 0506 	ands.w	r5, r5, #6
 80026a4:	d106      	bne.n	80026b4 <_printf_common+0x48>
 80026a6:	f104 0a19 	add.w	sl, r4, #25
 80026aa:	68e3      	ldr	r3, [r4, #12]
 80026ac:	6832      	ldr	r2, [r6, #0]
 80026ae:	1a9b      	subs	r3, r3, r2
 80026b0:	42ab      	cmp	r3, r5
 80026b2:	dc26      	bgt.n	8002702 <_printf_common+0x96>
 80026b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80026b8:	1e13      	subs	r3, r2, #0
 80026ba:	6822      	ldr	r2, [r4, #0]
 80026bc:	bf18      	it	ne
 80026be:	2301      	movne	r3, #1
 80026c0:	0692      	lsls	r2, r2, #26
 80026c2:	d42b      	bmi.n	800271c <_printf_common+0xb0>
 80026c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80026c8:	4649      	mov	r1, r9
 80026ca:	4638      	mov	r0, r7
 80026cc:	47c0      	blx	r8
 80026ce:	3001      	adds	r0, #1
 80026d0:	d01e      	beq.n	8002710 <_printf_common+0xa4>
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	6922      	ldr	r2, [r4, #16]
 80026d6:	f003 0306 	and.w	r3, r3, #6
 80026da:	2b04      	cmp	r3, #4
 80026dc:	bf02      	ittt	eq
 80026de:	68e5      	ldreq	r5, [r4, #12]
 80026e0:	6833      	ldreq	r3, [r6, #0]
 80026e2:	1aed      	subeq	r5, r5, r3
 80026e4:	68a3      	ldr	r3, [r4, #8]
 80026e6:	bf0c      	ite	eq
 80026e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026ec:	2500      	movne	r5, #0
 80026ee:	4293      	cmp	r3, r2
 80026f0:	bfc4      	itt	gt
 80026f2:	1a9b      	subgt	r3, r3, r2
 80026f4:	18ed      	addgt	r5, r5, r3
 80026f6:	2600      	movs	r6, #0
 80026f8:	341a      	adds	r4, #26
 80026fa:	42b5      	cmp	r5, r6
 80026fc:	d11a      	bne.n	8002734 <_printf_common+0xc8>
 80026fe:	2000      	movs	r0, #0
 8002700:	e008      	b.n	8002714 <_printf_common+0xa8>
 8002702:	2301      	movs	r3, #1
 8002704:	4652      	mov	r2, sl
 8002706:	4649      	mov	r1, r9
 8002708:	4638      	mov	r0, r7
 800270a:	47c0      	blx	r8
 800270c:	3001      	adds	r0, #1
 800270e:	d103      	bne.n	8002718 <_printf_common+0xac>
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002718:	3501      	adds	r5, #1
 800271a:	e7c6      	b.n	80026aa <_printf_common+0x3e>
 800271c:	18e1      	adds	r1, r4, r3
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	2030      	movs	r0, #48	; 0x30
 8002722:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002726:	4422      	add	r2, r4
 8002728:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800272c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002730:	3302      	adds	r3, #2
 8002732:	e7c7      	b.n	80026c4 <_printf_common+0x58>
 8002734:	2301      	movs	r3, #1
 8002736:	4622      	mov	r2, r4
 8002738:	4649      	mov	r1, r9
 800273a:	4638      	mov	r0, r7
 800273c:	47c0      	blx	r8
 800273e:	3001      	adds	r0, #1
 8002740:	d0e6      	beq.n	8002710 <_printf_common+0xa4>
 8002742:	3601      	adds	r6, #1
 8002744:	e7d9      	b.n	80026fa <_printf_common+0x8e>
	...

08002748 <_printf_i>:
 8002748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800274c:	7e0f      	ldrb	r7, [r1, #24]
 800274e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002750:	2f78      	cmp	r7, #120	; 0x78
 8002752:	4691      	mov	r9, r2
 8002754:	4680      	mov	r8, r0
 8002756:	460c      	mov	r4, r1
 8002758:	469a      	mov	sl, r3
 800275a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800275e:	d807      	bhi.n	8002770 <_printf_i+0x28>
 8002760:	2f62      	cmp	r7, #98	; 0x62
 8002762:	d80a      	bhi.n	800277a <_printf_i+0x32>
 8002764:	2f00      	cmp	r7, #0
 8002766:	f000 80d4 	beq.w	8002912 <_printf_i+0x1ca>
 800276a:	2f58      	cmp	r7, #88	; 0x58
 800276c:	f000 80c0 	beq.w	80028f0 <_printf_i+0x1a8>
 8002770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002774:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002778:	e03a      	b.n	80027f0 <_printf_i+0xa8>
 800277a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800277e:	2b15      	cmp	r3, #21
 8002780:	d8f6      	bhi.n	8002770 <_printf_i+0x28>
 8002782:	a101      	add	r1, pc, #4	; (adr r1, 8002788 <_printf_i+0x40>)
 8002784:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002788:	080027e1 	.word	0x080027e1
 800278c:	080027f5 	.word	0x080027f5
 8002790:	08002771 	.word	0x08002771
 8002794:	08002771 	.word	0x08002771
 8002798:	08002771 	.word	0x08002771
 800279c:	08002771 	.word	0x08002771
 80027a0:	080027f5 	.word	0x080027f5
 80027a4:	08002771 	.word	0x08002771
 80027a8:	08002771 	.word	0x08002771
 80027ac:	08002771 	.word	0x08002771
 80027b0:	08002771 	.word	0x08002771
 80027b4:	080028f9 	.word	0x080028f9
 80027b8:	08002821 	.word	0x08002821
 80027bc:	080028b3 	.word	0x080028b3
 80027c0:	08002771 	.word	0x08002771
 80027c4:	08002771 	.word	0x08002771
 80027c8:	0800291b 	.word	0x0800291b
 80027cc:	08002771 	.word	0x08002771
 80027d0:	08002821 	.word	0x08002821
 80027d4:	08002771 	.word	0x08002771
 80027d8:	08002771 	.word	0x08002771
 80027dc:	080028bb 	.word	0x080028bb
 80027e0:	682b      	ldr	r3, [r5, #0]
 80027e2:	1d1a      	adds	r2, r3, #4
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	602a      	str	r2, [r5, #0]
 80027e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80027ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027f0:	2301      	movs	r3, #1
 80027f2:	e09f      	b.n	8002934 <_printf_i+0x1ec>
 80027f4:	6820      	ldr	r0, [r4, #0]
 80027f6:	682b      	ldr	r3, [r5, #0]
 80027f8:	0607      	lsls	r7, r0, #24
 80027fa:	f103 0104 	add.w	r1, r3, #4
 80027fe:	6029      	str	r1, [r5, #0]
 8002800:	d501      	bpl.n	8002806 <_printf_i+0xbe>
 8002802:	681e      	ldr	r6, [r3, #0]
 8002804:	e003      	b.n	800280e <_printf_i+0xc6>
 8002806:	0646      	lsls	r6, r0, #25
 8002808:	d5fb      	bpl.n	8002802 <_printf_i+0xba>
 800280a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800280e:	2e00      	cmp	r6, #0
 8002810:	da03      	bge.n	800281a <_printf_i+0xd2>
 8002812:	232d      	movs	r3, #45	; 0x2d
 8002814:	4276      	negs	r6, r6
 8002816:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800281a:	485a      	ldr	r0, [pc, #360]	; (8002984 <_printf_i+0x23c>)
 800281c:	230a      	movs	r3, #10
 800281e:	e012      	b.n	8002846 <_printf_i+0xfe>
 8002820:	682b      	ldr	r3, [r5, #0]
 8002822:	6820      	ldr	r0, [r4, #0]
 8002824:	1d19      	adds	r1, r3, #4
 8002826:	6029      	str	r1, [r5, #0]
 8002828:	0605      	lsls	r5, r0, #24
 800282a:	d501      	bpl.n	8002830 <_printf_i+0xe8>
 800282c:	681e      	ldr	r6, [r3, #0]
 800282e:	e002      	b.n	8002836 <_printf_i+0xee>
 8002830:	0641      	lsls	r1, r0, #25
 8002832:	d5fb      	bpl.n	800282c <_printf_i+0xe4>
 8002834:	881e      	ldrh	r6, [r3, #0]
 8002836:	4853      	ldr	r0, [pc, #332]	; (8002984 <_printf_i+0x23c>)
 8002838:	2f6f      	cmp	r7, #111	; 0x6f
 800283a:	bf0c      	ite	eq
 800283c:	2308      	moveq	r3, #8
 800283e:	230a      	movne	r3, #10
 8002840:	2100      	movs	r1, #0
 8002842:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002846:	6865      	ldr	r5, [r4, #4]
 8002848:	60a5      	str	r5, [r4, #8]
 800284a:	2d00      	cmp	r5, #0
 800284c:	bfa2      	ittt	ge
 800284e:	6821      	ldrge	r1, [r4, #0]
 8002850:	f021 0104 	bicge.w	r1, r1, #4
 8002854:	6021      	strge	r1, [r4, #0]
 8002856:	b90e      	cbnz	r6, 800285c <_printf_i+0x114>
 8002858:	2d00      	cmp	r5, #0
 800285a:	d04b      	beq.n	80028f4 <_printf_i+0x1ac>
 800285c:	4615      	mov	r5, r2
 800285e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002862:	fb03 6711 	mls	r7, r3, r1, r6
 8002866:	5dc7      	ldrb	r7, [r0, r7]
 8002868:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800286c:	4637      	mov	r7, r6
 800286e:	42bb      	cmp	r3, r7
 8002870:	460e      	mov	r6, r1
 8002872:	d9f4      	bls.n	800285e <_printf_i+0x116>
 8002874:	2b08      	cmp	r3, #8
 8002876:	d10b      	bne.n	8002890 <_printf_i+0x148>
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	07de      	lsls	r6, r3, #31
 800287c:	d508      	bpl.n	8002890 <_printf_i+0x148>
 800287e:	6923      	ldr	r3, [r4, #16]
 8002880:	6861      	ldr	r1, [r4, #4]
 8002882:	4299      	cmp	r1, r3
 8002884:	bfde      	ittt	le
 8002886:	2330      	movle	r3, #48	; 0x30
 8002888:	f805 3c01 	strble.w	r3, [r5, #-1]
 800288c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002890:	1b52      	subs	r2, r2, r5
 8002892:	6122      	str	r2, [r4, #16]
 8002894:	f8cd a000 	str.w	sl, [sp]
 8002898:	464b      	mov	r3, r9
 800289a:	aa03      	add	r2, sp, #12
 800289c:	4621      	mov	r1, r4
 800289e:	4640      	mov	r0, r8
 80028a0:	f7ff fee4 	bl	800266c <_printf_common>
 80028a4:	3001      	adds	r0, #1
 80028a6:	d14a      	bne.n	800293e <_printf_i+0x1f6>
 80028a8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ac:	b004      	add	sp, #16
 80028ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	f043 0320 	orr.w	r3, r3, #32
 80028b8:	6023      	str	r3, [r4, #0]
 80028ba:	4833      	ldr	r0, [pc, #204]	; (8002988 <_printf_i+0x240>)
 80028bc:	2778      	movs	r7, #120	; 0x78
 80028be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80028c2:	6823      	ldr	r3, [r4, #0]
 80028c4:	6829      	ldr	r1, [r5, #0]
 80028c6:	061f      	lsls	r7, r3, #24
 80028c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80028cc:	d402      	bmi.n	80028d4 <_printf_i+0x18c>
 80028ce:	065f      	lsls	r7, r3, #25
 80028d0:	bf48      	it	mi
 80028d2:	b2b6      	uxthmi	r6, r6
 80028d4:	07df      	lsls	r7, r3, #31
 80028d6:	bf48      	it	mi
 80028d8:	f043 0320 	orrmi.w	r3, r3, #32
 80028dc:	6029      	str	r1, [r5, #0]
 80028de:	bf48      	it	mi
 80028e0:	6023      	strmi	r3, [r4, #0]
 80028e2:	b91e      	cbnz	r6, 80028ec <_printf_i+0x1a4>
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	f023 0320 	bic.w	r3, r3, #32
 80028ea:	6023      	str	r3, [r4, #0]
 80028ec:	2310      	movs	r3, #16
 80028ee:	e7a7      	b.n	8002840 <_printf_i+0xf8>
 80028f0:	4824      	ldr	r0, [pc, #144]	; (8002984 <_printf_i+0x23c>)
 80028f2:	e7e4      	b.n	80028be <_printf_i+0x176>
 80028f4:	4615      	mov	r5, r2
 80028f6:	e7bd      	b.n	8002874 <_printf_i+0x12c>
 80028f8:	682b      	ldr	r3, [r5, #0]
 80028fa:	6826      	ldr	r6, [r4, #0]
 80028fc:	6961      	ldr	r1, [r4, #20]
 80028fe:	1d18      	adds	r0, r3, #4
 8002900:	6028      	str	r0, [r5, #0]
 8002902:	0635      	lsls	r5, r6, #24
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	d501      	bpl.n	800290c <_printf_i+0x1c4>
 8002908:	6019      	str	r1, [r3, #0]
 800290a:	e002      	b.n	8002912 <_printf_i+0x1ca>
 800290c:	0670      	lsls	r0, r6, #25
 800290e:	d5fb      	bpl.n	8002908 <_printf_i+0x1c0>
 8002910:	8019      	strh	r1, [r3, #0]
 8002912:	2300      	movs	r3, #0
 8002914:	6123      	str	r3, [r4, #16]
 8002916:	4615      	mov	r5, r2
 8002918:	e7bc      	b.n	8002894 <_printf_i+0x14c>
 800291a:	682b      	ldr	r3, [r5, #0]
 800291c:	1d1a      	adds	r2, r3, #4
 800291e:	602a      	str	r2, [r5, #0]
 8002920:	681d      	ldr	r5, [r3, #0]
 8002922:	6862      	ldr	r2, [r4, #4]
 8002924:	2100      	movs	r1, #0
 8002926:	4628      	mov	r0, r5
 8002928:	f7fd fc52 	bl	80001d0 <memchr>
 800292c:	b108      	cbz	r0, 8002932 <_printf_i+0x1ea>
 800292e:	1b40      	subs	r0, r0, r5
 8002930:	6060      	str	r0, [r4, #4]
 8002932:	6863      	ldr	r3, [r4, #4]
 8002934:	6123      	str	r3, [r4, #16]
 8002936:	2300      	movs	r3, #0
 8002938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800293c:	e7aa      	b.n	8002894 <_printf_i+0x14c>
 800293e:	6923      	ldr	r3, [r4, #16]
 8002940:	462a      	mov	r2, r5
 8002942:	4649      	mov	r1, r9
 8002944:	4640      	mov	r0, r8
 8002946:	47d0      	blx	sl
 8002948:	3001      	adds	r0, #1
 800294a:	d0ad      	beq.n	80028a8 <_printf_i+0x160>
 800294c:	6823      	ldr	r3, [r4, #0]
 800294e:	079b      	lsls	r3, r3, #30
 8002950:	d413      	bmi.n	800297a <_printf_i+0x232>
 8002952:	68e0      	ldr	r0, [r4, #12]
 8002954:	9b03      	ldr	r3, [sp, #12]
 8002956:	4298      	cmp	r0, r3
 8002958:	bfb8      	it	lt
 800295a:	4618      	movlt	r0, r3
 800295c:	e7a6      	b.n	80028ac <_printf_i+0x164>
 800295e:	2301      	movs	r3, #1
 8002960:	4632      	mov	r2, r6
 8002962:	4649      	mov	r1, r9
 8002964:	4640      	mov	r0, r8
 8002966:	47d0      	blx	sl
 8002968:	3001      	adds	r0, #1
 800296a:	d09d      	beq.n	80028a8 <_printf_i+0x160>
 800296c:	3501      	adds	r5, #1
 800296e:	68e3      	ldr	r3, [r4, #12]
 8002970:	9903      	ldr	r1, [sp, #12]
 8002972:	1a5b      	subs	r3, r3, r1
 8002974:	42ab      	cmp	r3, r5
 8002976:	dcf2      	bgt.n	800295e <_printf_i+0x216>
 8002978:	e7eb      	b.n	8002952 <_printf_i+0x20a>
 800297a:	2500      	movs	r5, #0
 800297c:	f104 0619 	add.w	r6, r4, #25
 8002980:	e7f5      	b.n	800296e <_printf_i+0x226>
 8002982:	bf00      	nop
 8002984:	08003009 	.word	0x08003009
 8002988:	0800301a 	.word	0x0800301a

0800298c <_sbrk_r>:
 800298c:	b538      	push	{r3, r4, r5, lr}
 800298e:	4d06      	ldr	r5, [pc, #24]	; (80029a8 <_sbrk_r+0x1c>)
 8002990:	2300      	movs	r3, #0
 8002992:	4604      	mov	r4, r0
 8002994:	4608      	mov	r0, r1
 8002996:	602b      	str	r3, [r5, #0]
 8002998:	f7fe ffcc 	bl	8001934 <_sbrk>
 800299c:	1c43      	adds	r3, r0, #1
 800299e:	d102      	bne.n	80029a6 <_sbrk_r+0x1a>
 80029a0:	682b      	ldr	r3, [r5, #0]
 80029a2:	b103      	cbz	r3, 80029a6 <_sbrk_r+0x1a>
 80029a4:	6023      	str	r3, [r4, #0]
 80029a6:	bd38      	pop	{r3, r4, r5, pc}
 80029a8:	20000204 	.word	0x20000204

080029ac <_realloc_r>:
 80029ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029b0:	4680      	mov	r8, r0
 80029b2:	4614      	mov	r4, r2
 80029b4:	460e      	mov	r6, r1
 80029b6:	b921      	cbnz	r1, 80029c2 <_realloc_r+0x16>
 80029b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80029bc:	4611      	mov	r1, r2
 80029be:	f7ff bc71 	b.w	80022a4 <_malloc_r>
 80029c2:	b92a      	cbnz	r2, 80029d0 <_realloc_r+0x24>
 80029c4:	f7ff fc04 	bl	80021d0 <_free_r>
 80029c8:	4625      	mov	r5, r4
 80029ca:	4628      	mov	r0, r5
 80029cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029d0:	f000 f81b 	bl	8002a0a <_malloc_usable_size_r>
 80029d4:	4284      	cmp	r4, r0
 80029d6:	4607      	mov	r7, r0
 80029d8:	d802      	bhi.n	80029e0 <_realloc_r+0x34>
 80029da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80029de:	d812      	bhi.n	8002a06 <_realloc_r+0x5a>
 80029e0:	4621      	mov	r1, r4
 80029e2:	4640      	mov	r0, r8
 80029e4:	f7ff fc5e 	bl	80022a4 <_malloc_r>
 80029e8:	4605      	mov	r5, r0
 80029ea:	2800      	cmp	r0, #0
 80029ec:	d0ed      	beq.n	80029ca <_realloc_r+0x1e>
 80029ee:	42bc      	cmp	r4, r7
 80029f0:	4622      	mov	r2, r4
 80029f2:	4631      	mov	r1, r6
 80029f4:	bf28      	it	cs
 80029f6:	463a      	movcs	r2, r7
 80029f8:	f7ff f843 	bl	8001a82 <memcpy>
 80029fc:	4631      	mov	r1, r6
 80029fe:	4640      	mov	r0, r8
 8002a00:	f7ff fbe6 	bl	80021d0 <_free_r>
 8002a04:	e7e1      	b.n	80029ca <_realloc_r+0x1e>
 8002a06:	4635      	mov	r5, r6
 8002a08:	e7df      	b.n	80029ca <_realloc_r+0x1e>

08002a0a <_malloc_usable_size_r>:
 8002a0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a0e:	1f18      	subs	r0, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	bfbc      	itt	lt
 8002a14:	580b      	ldrlt	r3, [r1, r0]
 8002a16:	18c0      	addlt	r0, r0, r3
 8002a18:	4770      	bx	lr
	...

08002a1c <_init>:
 8002a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1e:	bf00      	nop
 8002a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a22:	bc08      	pop	{r3}
 8002a24:	469e      	mov	lr, r3
 8002a26:	4770      	bx	lr

08002a28 <_fini>:
 8002a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2a:	bf00      	nop
 8002a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a2e:	bc08      	pop	{r3}
 8002a30:	469e      	mov	lr, r3
 8002a32:	4770      	bx	lr
